17:16:31 完整请求
17:16:31 请求结束
17:16:31 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:16:31 path and query /weibo/index {} 
17:16:31 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:16:31 完整请求
17:16:31 完整请求
17:16:31 请求结束
17:16:31 请求结束
17:16:31 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:16:31 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:16:31 path and query /static {'file': 'weibo.js'} 
17:16:31 path and query /static {'file': 'gua.js'} 
17:16:31 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

17:16:31 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            apiweiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
//    bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:16:31 完整请求
17:16:31 请求结束
17:16:31 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:16:31 path and query /api/weibo/all {} 
17:16:31 kwargs,  {'weibo_id': 1} <class 'dict'>
17:16:31 kwargs,  {'weibo_id': 2} <class 'dict'>
17:16:31 kwargs,  {'weibo_id': 3} <class 'dict'>
17:16:31 kwargs,  {'weibo_id': 4} <class 'dict'>
17:16:31 kwargs,  {'weibo_id': 5} <class 'dict'>
17:16:31 kwargs,  {'weibo_id': 6} <class 'dict'>
17:16:31 kwargs,  {'weibo_id': 7} <class 'dict'>
17:16:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "",
    "comments": []
  },
  {
    "id": 5,
    "content": "",
    "comments": []
  },
  {
    "id": 6,
    "content": "",
    "comments": []
  },
  {
    "id": 7,
    "content": "",
    "comments": []
  }
]
17:16:31 完整请求
17:16:31 请求结束
17:16:31 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:16:31 path and query /static {'file': 'weibo.js'} 
17:16:31 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            apiweiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
//    bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:16:34 完整请求
17:16:34 请求结束
17:16:34 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:16:34 path and query /api/weibo/add {} {"title":"sdf"}
17:16:34 kwargs,  {'weibo_id': 8} <class 'dict'>
17:16:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "content": "",
  "comments": []
}
17:17:29 完整请求
17:17:29 请求结束
17:17:29 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:17:29 path and query /weibo/index {} 
17:17:29 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:17:30 完整请求
17:17:30 完整请求
17:17:30 请求结束
17:17:30 请求结束
17:17:30 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:17:30 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:17:30 path and query /static {'file': 'weibo.js'} 
17:17:30 path and query /static {'file': 'gua.js'} 
17:17:30 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            apiweiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
//    bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:17:30 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

17:17:30 完整请求
17:17:30 请求结束
17:17:30 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:17:30 path and query /api/weibo/all {} 
17:17:30 kwargs,  {'weibo_id': 1} <class 'dict'>
17:17:30 kwargs,  {'weibo_id': 2} <class 'dict'>
17:17:30 kwargs,  {'weibo_id': 3} <class 'dict'>
17:17:30 kwargs,  {'weibo_id': 4} <class 'dict'>
17:17:30 kwargs,  {'weibo_id': 5} <class 'dict'>
17:17:30 kwargs,  {'weibo_id': 6} <class 'dict'>
17:17:30 kwargs,  {'weibo_id': 7} <class 'dict'>
17:17:30 完整请求
17:17:30 请求结束
17:17:30 kwargs,  {'weibo_id': 8} <class 'dict'>
17:17:30 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:17:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "",
    "comments": []
  },
  {
    "id": 5,
    "content": "",
    "comments": []
  },
  {
    "id": 6,
    "content": "",
    "comments": []
  },
  {
    "id": 7,
    "content": "",
    "comments": []
  },
  {
    "id": 8,
    "content": "",
    "comments": []
  }
]
17:17:30 path and query /static {'file': 'weibo.js'} 
17:17:30 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            apiweiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
//    bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:17:34 完整请求
17:17:34 请求结束
17:17:34 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:17:34 path and query /todo {} 
17:17:34 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
17:17:37 完整请求
17:17:37 请求结束
17:17:38 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:17:38 path and query / {} 
17:17:38 响应
 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


17:17:38 完整请求
17:17:38 请求结束
17:17:38 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:17:38 path and query /todo/index {} 
17:17:38 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
17:17:38 完整请求
17:17:38 完整请求
17:17:38 请求结束
17:17:38 请求结束
17:17:38 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:17:38 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:17:38 path and query /static {'file': 'gua.js'} 
17:17:38 path and query /static {'file': 'todo.js'} 
17:17:38 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
17:17:38 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

17:17:38 完整请求
17:17:38 请求结束
17:17:38 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:17:38 path and query /api/todo/all {} 
17:17:38 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "title": "瓜",
    "completed": false,
    "ct": 1488975265,
    "ut": 1488978669
  },
  {
    "id": 5,
    "title": "围绕",
    "completed": false,
    "ct": 1516956910,
    "ut": 1516956910
  }
]
17:17:41 完整请求
17:17:41 请求结束
17:17:41 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:17:41 path and query /api/todo/add {} {"title":"dfd "}
17:17:41 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "title": "dfd ",
  "completed": false,
  "ct": 1516958261,
  "ut": 1516958261
}
17:19:41 完整请求
17:19:41 请求结束
17:19:41 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:19:41 path and query /weibo/index {} 
17:19:41 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:19:41 完整请求
17:19:41 完整请求
17:19:41 请求结束
17:19:41 请求结束
17:19:41 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:19:41 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:19:41 path and query /static {'file': 'weibo.js'} 
17:19:41 path and query /static {'file': 'gua.js'} 
17:19:41 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

17:19:41 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            apiweiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
//    bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:19:41 完整请求
17:19:41 请求结束
17:19:41 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:19:41 path and query /api/weibo/all {} 
17:19:41 kwargs,  {'weibo_id': 1} <class 'dict'>
17:19:41 kwargs,  {'weibo_id': 2} <class 'dict'>
17:19:41 kwargs,  {'weibo_id': 3} <class 'dict'>
17:19:41 kwargs,  {'weibo_id': 4} <class 'dict'>
17:19:41 kwargs,  {'weibo_id': 5} <class 'dict'>
17:19:41 kwargs,  {'weibo_id': 6} <class 'dict'>
17:19:41 kwargs,  {'weibo_id': 7} <class 'dict'>
17:19:41 完整请求
17:19:41 请求结束
17:19:41 kwargs,  {'weibo_id': 8} <class 'dict'>
17:19:41 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:19:41 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "",
    "comments": []
  },
  {
    "id": 5,
    "content": "",
    "comments": []
  },
  {
    "id": 6,
    "content": "",
    "comments": []
  },
  {
    "id": 7,
    "content": "",
    "comments": []
  },
  {
    "id": 8,
    "content": "",
    "comments": []
  }
]
17:19:41 path and query /static {'file': 'weibo.js'} 
17:19:41 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            apiweiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
//    bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:22:22 完整请求
17:22:22 请求结束
17:22:22 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:22:22 path and query /weibo/index {} 
17:22:22 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:22:22 完整请求
17:22:22 完整请求
17:22:22 请求结束
17:22:22 请求结束
17:22:22 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:22:22 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:22:22 path and query /static {'file': 'gua.js'} 
17:22:22 path and query /static {'file': 'weibo.js'} 
17:22:22 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

s = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            apiweiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
//    bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:22:22 完整请求
17:22:22 请求结束
17:22:22 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:22:22 path and query /api/weibo/all {} 
17:22:22 kwargs,  {'weibo_id': 1} <class 'dict'>
17:22:22 kwargs,  {'weibo_id': 2} <class 'dict'>
17:22:22 kwargs,  {'weibo_id': 3} <class 'dict'>
17:22:22 kwargs,  {'weibo_id': 4} <class 'dict'>
17:22:22 kwargs,  {'weibo_id': 5} <class 'dict'>
17:22:22 kwargs,  {'weibo_id': 6} <class 'dict'>
17:22:22 kwargs,  {'weibo_id': 7} <class 'dict'>
17:22:22 kwargs,  {'weibo_id': 8} <class 'dict'>
17:22:22 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "",
    "comments": []
  },
  {
    "id": 5,
    "content": "",
    "comments": []
  },
  {
    "id": 6,
    "content": "",
    "comments": []
  },
  {
    "id": 7,
    "content": "",
    "comments": []
  },
  {
    "id": 8,
    "content": "",
    "comments": []
  }
]
17:22:22 完整请求
17:22:22 请求结束
17:22:22 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:22:22 path and query /static {'file': 'weibo.js'} 
17:22:22 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            apiweiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
//    bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:22:26 完整请求
17:22:26 请求结束
17:22:26 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:22:26 path and query /api/weibo/add {} {"content":"恶风"}
17:22:26 kwargs,  {'weibo_id': 9} <class 'dict'>
17:22:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "content": "恶风",
  "comments": []
}
17:22:44 完整请求
17:22:44 请求结束
17:22:44 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:22:44 path and query /weibo/index {} 
17:22:44 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:22:44 完整请求
17:22:44 完整请求
17:22:44 请求结束
17:22:44 请求结束
17:22:44 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:22:44 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:22:44 path and query /static {'file': 'gua.js'} 
17:22:44 path and query /static {'file': 'weibo.js'} 
17:22:44 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            apiweiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
//    bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:22:44 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

17:22:44 完整请求
17:22:44 请求结束
17:22:44 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:22:44 path and query /api/weibo/all {} 
17:22:44 完整请求
17:22:44 完整请求
17:22:44 请求结束
17:22:44 请求结束
17:22:44 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:22:44 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:22:44 path and query /static {'file': 'weibo.js'} 
17:22:44 path and query /api/weibo/all {} 
17:22:44 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            apiweiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
//    bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:22:51 完整请求
17:22:51 请求结束
17:22:51 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:22:51 path and query /api/weibo/all {} 
17:22:51 完整请求
17:22:51 请求结束
17:22:51 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:22:51 path and query /api/weibo/all {} 
17:23:14 完整请求
17:23:14 请求结束
17:23:14 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:23:14 path and query /api/weibo/all {} 
17:23:14 kwargs,  {'weibo_id': 1} <class 'dict'>
17:23:14 kwargs,  {'weibo_id': 2} <class 'dict'>
17:23:14 kwargs,  {'weibo_id': 3} <class 'dict'>
17:23:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  }
]
17:23:17 完整请求
17:23:17 请求结束
17:23:17 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:23:17 path and query /weibo/index {} 
17:23:17 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:23:17 完整请求
17:23:17 完整请求
17:23:17 请求结束
17:23:17 请求结束
17:23:17 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:23:17 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:23:17 path and query /static {'file': 'gua.js'} 
17:23:17 path and query /static {'file': 'weibo.js'} 
17:23:17 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

17:23:17 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            apiweiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
//    bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:23:17 完整请求
17:23:17 请求结束
17:23:17 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:23:17 path and query /api/weibo/all {} 
17:23:17 kwargs,  {'weibo_id': 1} <class 'dict'>
17:23:17 kwargs,  {'weibo_id': 2} <class 'dict'>
17:23:17 kwargs,  {'weibo_id': 3} <class 'dict'>
17:23:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  }
]
17:23:17 完整请求
17:23:17 请求结束
17:23:17 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:23:17 path and query /static {'file': 'weibo.js'} 
17:23:18 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            apiweiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
//    bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:23:24 完整请求
17:23:25 请求结束
17:23:25 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:23:25 path and query /api/weibo/add {} {"content":"添加完成"}
17:23:25 kwargs,  {'weibo_id': 4} <class 'dict'>
17:23:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "content": "添加完成",
  "comments": []
}
17:24:24 完整请求
17:24:24 请求结束
17:24:24 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:24:24 path and query / {} 
17:24:24 响应
 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


17:24:24 完整请求
17:24:24 请求结束
17:24:24 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:24:24 path and query /todo/index {} 
17:24:24 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
17:24:24 完整请求
17:24:24 完整请求
17:24:24 请求结束
17:24:24 请求结束
17:24:24 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:24:24 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:24:24 path and query /static {'file': 'todo.js'} 
17:24:24 path and query /static {'file': 'gua.js'} 
17:24:24 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
17:24:24 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

17:24:24 完整请求
17:24:24 请求结束
17:24:24 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:24:24 path and query /api/todo/all {} 
17:24:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "title": "瓜",
    "completed": false,
    "ct": 1488975265,
    "ut": 1488978669
  },
  {
    "id": 5,
    "title": "围绕",
    "completed": false,
    "ct": 1516956910,
    "ut": 1516956910
  },
  {
    "id": 6,
    "title": "dfd ",
    "completed": false,
    "ct": 1516958261,
    "ut": 1516958261
  }
]
17:30:52 完整请求
17:30:52 请求结束
17:30:52 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:30:52 path and query /weibo/index {} 
17:30:52 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:30:52 完整请求
17:30:52 完整请求
17:30:52 请求结束
17:30:52 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:30:52 请求结束
17:30:52 path and query /static {'file': 'gua.js'} 
17:30:52 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:30:52 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

17:30:52 path and query /static {'file': 'weibo.js'} 
17:30:52 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
                <button class="weibo-delete">删除微博</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:30:52 完整请求
17:30:52 请求结束
17:30:52 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:30:52 path and query /api/weibo/all {} 
17:30:52 kwargs,  {'weibo_id': 1} <class 'dict'>
17:30:52 kwargs,  {'weibo_id': 2} <class 'dict'>
17:30:52 kwargs,  {'weibo_id': 3} <class 'dict'>
17:30:52 kwargs,  {'weibo_id': 4} <class 'dict'>
17:30:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "添加完成",
    "comments": []
  }
]
17:31:05 完整请求
17:31:05 请求结束
17:31:05 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:31:05 path and query /api/weibo/delete {'id': 'undefined'} 
17:31:11 完整请求
17:31:11 完整请求
17:31:11 请求结束
17:31:11 请求结束
17:31:11 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:31:11 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:31:11 path and query /api/weibo/delete {'id': 'undefined'} 
17:31:11 path and query /static {'file': 'weibo.js'} 
17:31:11 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
                <button class="weibo-delete">删除微博</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:33:17 完整请求
17:33:17 请求结束
17:33:17 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:17 path and query /weibo/index {} 
17:33:17 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:33:17 完整请求
17:33:17 完整请求
17:33:17 请求结束
17:33:17 请求结束
17:33:17 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:17 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:17 path and query /static {'file': 'gua.js'} 
17:33:17 path and query /static {'file': 'weibo.js'} 
17:33:17 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

17:33:17 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
                <button class="weibo-delete">删除微博</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:33:17 完整请求
17:33:17 请求结束
17:33:17 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:17 path and query /api/weibo/all {} 
17:33:17 kwargs,  {'weibo_id': 1} <class 'dict'>
17:33:17 kwargs,  {'weibo_id': 2} <class 'dict'>
17:33:17 kwargs,  {'weibo_id': 3} <class 'dict'>
17:33:17 kwargs,  {'weibo_id': 4} <class 'dict'>
17:33:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "添加完成",
    "comments": []
  }
]
17:33:17 完整请求
17:33:17 请求结束
17:33:17 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:17 path and query /static {'file': 'weibo.js'} 
17:33:17 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
                <button class="weibo-delete">删除微博</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:33:28 完整请求
17:33:28 请求结束
17:33:28 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:28 path and query /api/weibo/delete {'id': 'undefined'} 
17:33:59 完整请求
17:33:59 完整请求
17:33:59 请求结束
17:33:59 请求结束
17:33:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:59 path and query /api/weibo/delete {'id': 'undefined'} 
17:33:59 path and query /api/weibo/delete {'id': 'undefined'} 
17:33:59 完整请求
17:33:59 完整请求
17:33:59 请求结束
17:33:59 请求结束
17:33:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:59 path and query /api/weibo/delete {'id': 'undefined'} 
17:33:59 path and query /api/weibo/delete {'id': 'undefined'} 
17:33:59 完整请求
17:33:59 完整请求
17:33:59 请求结束
17:33:59 请求结束
17:33:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:59 path and query /api/weibo/delete {'id': 'undefined'} 
17:33:59 path and query /api/weibo/delete {'id': 'undefined'} 
17:33:59 完整请求
17:33:59 完整请求
17:33:59 请求结束
17:33:59 请求结束
17:33:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:59 path and query /api/weibo/delete {'id': 'undefined'} 
17:33:59 path and query /api/weibo/delete {'id': 'undefined'} 
17:33:59 完整请求
17:33:59 完整请求
17:33:59 请求结束
17:33:59 请求结束
17:33:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:59 path and query /api/weibo/delete {'id': 'undefined'} 
17:33:59 path and query /api/weibo/delete {'id': 'undefined'} 
17:33:59 完整请求
17:33:59 完整请求
17:33:59 请求结束
17:33:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:59 path and query /api/weibo/delete {'id': 'undefined'} 
17:33:59 path and query /api/weibo/delete {'id': 'undefined'} 
17:33:59 完整请求
17:33:59 完整请求
17:33:59 请求结束
17:33:59 请求结束
17:33:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:59 path and query /api/weibo/delete {'id': 'undefined'} 
17:33:59 path and query /api/weibo/delete {'id': 'undefined'} 
17:33:59 完整请求
17:33:59 完整请求
17:33:59 请求结束
17:33:59 请求结束
17:33:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:59 path and query /api/weibo/delete {'id': 'undefined'} 
17:33:59 path and query /api/weibo/delete {'id': 'undefined'} 
17:33:59 完整请求
17:33:59 完整请求
17:33:59 请求结束
17:33:59 请求结束
17:33:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:59 path and query /api/weibo/delete {'id': 'undefined'} 
17:33:59 path and query /api/weibo/delete {'id': 'undefined'} 
17:33:59 完整请求
17:33:59 请求结束
17:33:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:33:59 path and query /api/weibo/delete {'id': 'undefined'} 
17:35:39 完整请求
17:35:39 请求结束
17:35:39 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:35:39 path and query /api/weibo/add {} {"content":"waerwer"}
17:35:39 kwargs,  {'weibo_id': 5} <class 'dict'>
17:35:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "waerwer",
  "comments": []
}
17:39:22 完整请求
17:39:22 请求结束
17:39:22 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:39:22 path and query /weibo/index {} 
17:39:22 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:39:22 完整请求
17:39:22 完整请求
17:39:22 请求结束
17:39:22 请求结束
17:39:22 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:39:22 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:39:22 path and query /static {'file': 'gua.js'} 
17:39:22 path and query /static {'file': 'weibo.js'} 
17:39:22 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
                <button class="weibo-delete">删除微博</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement.parentElement
            var weibo_id = weiboCell.dataset.id
            log('weibo_id', weibo_id)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:39:22 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

17:39:22 完整请求
17:39:22 请求结束
17:39:22 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:39:22 path and query /api/weibo/all {} 
17:39:22 kwargs,  {'weibo_id': 1} <class 'dict'>
17:39:22 kwargs,  {'weibo_id': 2} <class 'dict'>
17:39:22 kwargs,  {'weibo_id': 3} <class 'dict'>
17:39:22 kwargs,  {'weibo_id': 4} <class 'dict'>
17:39:22 kwargs,  {'weibo_id': 5} <class 'dict'>
17:39:22 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "hello tweet",
    "user_id": 1,
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "hahaha",
    "user_id": 1,
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "添加完成",
    "comments": []
  },
  {
    "id": 5,
    "content": "waerwer",
    "comments": []
  }
]
17:39:24 完整请求
17:39:24 请求结束
17:39:24 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:39:24 path and query /api/weibo/delete {'id': '5'} 
17:39:24 kwargs,  {'weibo_id': 5} <class 'dict'>
17:39:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "waerwer",
  "comments": []
}
17:39:25 完整请求
17:39:25 请求结束
17:39:25 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:39:25 path and query /api/weibo/delete {'id': '4'} 
17:39:25 kwargs,  {'weibo_id': 4} <class 'dict'>
17:39:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "content": "添加完成",
  "comments": []
}
17:39:37 完整请求
17:39:37 请求结束
17:39:37 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:39:37 path and query /api/weibo/delete {'id': '3'} 
17:39:37 kwargs,  {'weibo_id': 3} <class 'dict'>
17:39:37 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "content": "hahaha",
  "user_id": 1,
  "comments": [
    {
      "id": 6,
      "content": "123",
      "weibo_id": 3,
      "user_id": 1
    }
  ]
}
17:40:52 完整请求
17:40:52 请求结束
17:40:52 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:40:52 path and query /api/weibo/delete {'id': '1'} 
17:40:52 kwargs,  {'weibo_id': 1} <class 'dict'>
17:40:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "hello tweet",
  "user_id": 1,
  "comments": [
    {
      "id": 1,
      "content": "楼主说得对",
      "weibo_id": 1,
      "user_id": 2
    },
    {
      "id": 2,
      "content": "lbvu is right",
      "weibo_id": 1,
      "user_id": 1
    }
  ]
}
17:41:03 完整请求
17:41:03 请求结束
17:41:03 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:41:03 path and query /weibo/index {} 
17:41:03 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:41:03 完整请求
17:41:03 完整请求
17:41:03 请求结束
17:41:03 请求结束
17:41:03 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:41:03 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:41:03 path and query /static {'file': 'gua.js'} 
17:41:03 path and query /static {'file': 'weibo.js'} 
17:41:03 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

17:41:03 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
                <button class="weibo-delete">删除微博</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement.parentElement
            var weibo_id = weiboCell.dataset.id
            log('weibo_id----', weibo_id)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:41:03 完整请求
17:41:03 请求结束
17:41:03 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:41:03 path and query /api/weibo/all {} 
17:41:03 kwargs,  {'weibo_id': 2} <class 'dict'>
17:41:03 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  }
]
17:43:18 完整请求
17:43:18 请求结束
17:43:18 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:43:18 path and query / {} 
17:43:18 响应
 HTTP/1.1 302 OK
Content-Type: text/html
Location: /todo/index


17:43:18 完整请求
17:43:18 请求结束
17:43:18 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:43:18 path and query /todo/index {} 
17:43:18 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>web10 todo ajax</title>
    </head>
    <body>
        <input id='id-input-todo'>
        <button id='id-button-add'>add</button>
        <div class="todo-list">
        </div>
        <!-- 这是我们处理静态文件的套路 -->
        <!-- gua.js 放了公共的函数 -->
        <!-- 按顺序引入 2 个 js 文件, 后面的 js 文件就能使用前面的文件中的函数了 -->
        <script src='/static?file=gua.js'></script>
        <script src='/static?file=todo.js'></script>
    </body>
</html>
17:43:18 完整请求
17:43:18 请求结束
17:43:18 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:43:18 path and query /static {'file': 'gua.js'} 
17:43:18 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

17:43:18 完整请求
17:43:18 请求结束
17:43:18 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:43:18 path and query /static {'file': 'todo.js'} 
17:43:18 响应
 HTTP/1.1 200 OK

var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var todoTemplate = function(todo) {
    var title = todo.title
    var id = todo.id
    var ut = timeString(todo.ut)
    // data-xx 是自定义标签属性的语法
    // 通过这样的方式可以给任意标签添加任意属性
    // 假设 d 是 这个 div 的引用
    // 这样的自定义属性通过  d.dataset.xx 来获取
    // 在这个例子里面, 是 d.dataset.id
    var t = `
        <div class="todo-cell" id='todo-${id}' data-id="${id}">
            <button class="todo-edit">编辑</button>
            <button class="todo-delete">删除</button>
            <span class='todo-title'>${title}</span>
            <time class='todo-ut'>${ut}</time>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="todo-cell">
        <button class="todo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(todo)
    */
}

var insertTodo = function(todo) {
    var todoCell = todoTemplate(todo)
    // 插入 todo-list
    var todoList = e('.todo-list')
    todoList.insertAdjacentHTML('beforeend', todoCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='todo-edit-form'>
            <input class="todo-edit-input">
            <button class='todo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadTodos = function() {
    // 调用 ajax api 来载入数据
    apiTodoAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var todos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < todos.length; i++) {
            var todo = todos[i]
            insertTodo(todo)
        }
    })
}

var bindEventTodoAdd = function() {
    var b = e('#id-button-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-todo')
        var title = input.value
        log('click add', title)
        var form = {
            'title': title,
        }
        apiTodoAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var todo = JSON.parse(r)
            insertTodo(todo)
        })
    })
}

var bindEventTodoDelete = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-delete')){
            // 删除这个 todo
            var todoCell = self.parentElement
            var todo_id = todoCell.dataset.id
            apiTodoDelete(todo_id, function(r){
                log('删除成功', todo_id)
                todoCell.remove()
            })
        }
    })
}

var bindEventTodoEdit = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-edit')){
            // 删除这个 todo
            var todoCell = self.parentElement
            insertEditForm(todoCell)
        }
    })
}


var bindEventTodoUpdate = function() {
    var todoList = e('.todo-list')
    // 注意, 第二个参数可以直接给出定义函数
    todoList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('todo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.todo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var todoCell = self.closest('.todo-cell')
            var todo_id = todoCell.dataset.id
            var form = {
                'id': todo_id,
                'title': title,
            }
            apiTodoUpdate(form, function(r){
                log('更新成功', todo_id)
                var todo = JSON.parse(r)
                var selector = '#todo-' + todo.id
                var todoCell = e(selector)
                var titleSpan = todoCell.querySelector('.todo-title')
                titleSpan.innerHTML = todo.title
//                todoCell.remove()
            })
        }
    })
}

var bindEvents = function() {
    bindEventTodoAdd()
    bindEventTodoDelete()
    bindEventTodoEdit()
    bindEventTodoUpdate()
}

var __main = function() {
    bindEvents()
    loadTodos()
}

__main()






/*
给 删除 按钮绑定删除的事件
1, 绑定事件
2, 删除整个 todo-cell 元素
*/
// var todoList = e('.todo-list')
// // 事件响应函数会被传入一个参数, 就是事件本身
// todoList.addEventListener('click', function(event){
//     // log('click todolist', event)
//     // 我们可以通过 event.target 来得到被点击的元素
//     var self = event.target
//     // log('被点击的元素是', self)
//     // 通过比较被点击元素的 class 来判断元素是否是我们想要的
//     // classList 属性保存了元素的所有 class
//     // 在 HTML 中, 一个元素可以有多个 class, 用空格分开
//     // log(self.classList)
//     // 判断是否拥有某个 class 的方法如下
//     if (self.classList.contains('todo-delete')) {
//         log('点到了 删除按钮')
//         // 删除 self 的父节点
//         // parentElement 可以访问到元素的父节点
//         self.parentElement.remove()
//     } else {
//         // log('点击的不是删除按钮******')
//     }
// })
17:43:19 完整请求
17:43:19 请求结束
17:43:19 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:43:19 path and query /api/todo/all {} 
17:43:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 4,
    "title": "瓜",
    "completed": false,
    "ct": 1488975265,
    "ut": 1488978669
  },
  {
    "id": 5,
    "title": "围绕",
    "completed": false,
    "ct": 1516956910,
    "ut": 1516956910
  },
  {
    "id": 6,
    "title": "dfd ",
    "completed": false,
    "ct": 1516958261,
    "ut": 1516958261
  }
]
17:43:19 完整请求
17:43:19 请求结束
17:43:19 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:43:19 path and query /favicon.ico {} 
17:43:19 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
17:43:24 完整请求
17:43:24 请求结束
17:43:24 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:43:24 path and query /weibo/index {} 
17:43:24 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:43:24 完整请求
17:43:24 完整请求
17:43:24 请求结束
17:43:24 请求结束
17:43:24 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:43:24 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:43:24 path and query /static {'file': 'gua.js'} 
17:43:24 path and query /static {'file': 'weibo.js'} 
17:43:24 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

17:43:24 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
                <button class="weibo-delete">删除微博</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement.parentElement
            var weibo_id = weiboCell.dataset.id
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:43:24 完整请求
17:43:24 请求结束
17:43:24 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:43:24 path and query /api/weibo/all {} 
17:43:24 kwargs,  {'weibo_id': 2} <class 'dict'>
17:43:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  }
]
17:44:13 完整请求
17:44:13 完整请求
17:44:13 完整请求
17:44:13 完整请求
17:44:13 完整请求
17:44:13 请求结束
17:44:13 请求结束
17:44:13 请求结束
17:44:13 请求结束
17:44:13 请求结束
17:44:34 完整请求
17:44:34 请求结束
17:44:34 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:44:34 path and query /weibo/index {} 
17:44:34 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:44:34 完整请求
17:44:34 请求结束
17:44:34 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:44:34 path and query /static {'file': 'gua.js'} 
17:44:34 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

17:44:34 完整请求
17:44:34 请求结束
17:44:34 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:44:34 path and query /static {'file': 'weibo.js'} 
17:44:34 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
                <button class="weibo-delete">删除微博</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement.parentElement
            var weibo_id = weiboCell.dataset.id
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:44:34 完整请求
17:44:34 请求结束
17:44:35 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:44:35 path and query /api/weibo/all {} 
17:44:35 kwargs,  {'weibo_id': 2} <class 'dict'>
17:44:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  }
]
17:48:19 完整请求
17:48:19 请求结束
17:48:19 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:48:20 path and query /static {'file': 'weibo.js'} 
17:48:20 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
                <button class="weibo-delete">删除微博</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement.parentElement
            var weibo_id = weiboCell.dataset.id
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:48:26 完整请求
17:48:26 请求结束
17:48:26 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:48:26 path and query /api/weibo/add {} {"content":"waerwer"}
17:48:26 kwargs,  {'weibo_id': 3} <class 'dict'>
17:48:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "content": "waerwer",
  "comments": [
    {
      "id": 6,
      "content": "123",
      "weibo_id": 3,
      "user_id": 1
    }
  ]
}
17:49:40 完整请求
17:49:40 请求结束
17:49:40 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:49:40 path and query /weibo/index {} 
17:49:40 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:49:40 完整请求
17:49:40 完整请求
17:49:40 请求结束
17:49:40 请求结束
17:49:40 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:49:40 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:49:40 path and query /static {'file': 'weibo.js'} 
17:49:40 path and query /static {'file': 'gua.js'} 
17:49:40 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
                <button class="weibo-delete">删除微博</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement.parentElement
            var weibo_id = weiboCell.dataset.id
            log('weibo_id----', weibo_id)
            log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:49:40 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

17:49:40 完整请求
17:49:40 请求结束
17:49:40 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:49:40 path and query /api/weibo/all {} 
17:49:40 kwargs,  {'weibo_id': 2} <class 'dict'>
17:49:40 kwargs,  {'weibo_id': 3} <class 'dict'>
17:49:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "waerwer",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  }
]
17:49:40 完整请求
17:49:40 请求结束
17:49:40 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:49:40 path and query /static {'file': 'weibo.js'} 
17:49:40 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id}>
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
                <button class="weibo-delete">删除微博</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement.parentElement
            var weibo_id = weiboCell.dataset.id
            log('weibo_id----', weibo_id)
            log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:49:45 完整请求
17:49:45 请求结束
17:49:45 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:49:45 path and query /api/weibo/delete {'id': '3'} 
17:49:45 kwargs,  {'weibo_id': 3} <class 'dict'>
17:49:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "content": "waerwer",
  "comments": [
    {
      "id": 6,
      "content": "123",
      "weibo_id": 3,
      "user_id": 1
    }
  ]
}
17:50:32 完整请求
17:50:32 请求结束
17:50:32 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:50:32 path and query /api/weibo/add {} {"content":"测试"}
17:50:32 kwargs,  {'weibo_id': 3} <class 'dict'>
17:50:32 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "content": "测试",
  "comments": [
    {
      "id": 6,
      "content": "123",
      "weibo_id": 3,
      "user_id": 1
    }
  ]
}
17:50:52 完整请求
17:50:52 请求结束
17:50:52 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:50:52 path and query /weibo/index {} 
17:50:53 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:50:53 完整请求
17:50:53 完整请求
17:50:53 请求结束
17:50:53 请求结束
17:50:53 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:50:53 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:50:53 path and query /static {'file': 'weibo.js'} 
17:50:53 path and query /static {'file': 'gua.js'} 
17:50:53 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

17:50:53 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
                <button class="weibo-delete">删除微博</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement.parentElement
            var weibo_id = weiboCell.dataset.id
            log('weibo_id----', weibo_id)
            log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:50:53 完整请求
17:50:53 请求结束
17:50:53 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:50:53 path and query /api/weibo/all {} 
17:50:53 kwargs,  {'weibo_id': 2} <class 'dict'>
17:50:53 kwargs,  {'weibo_id': 3} <class 'dict'>
17:50:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  }
]
17:50:53 完整请求
17:50:53 请求结束
17:50:53 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:50:53 path and query /static {'file': 'weibo.js'} 
17:50:53 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div>
                [weibo]: ${content}
            </div>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
                <button class="weibo-delete">删除微博</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement.parentElement
            var weibo_id = weiboCell.dataset.id
            log('weibo_id----', weibo_id)
            log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
//    bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:51:02 完整请求
17:51:02 请求结束
17:51:02 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:51:02 path and query /api/weibo/delete {'id': '3'} 
17:51:02 kwargs,  {'weibo_id': 3} <class 'dict'>
17:51:02 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "content": "测试",
  "comments": [
    {
      "id": 6,
      "content": "123",
      "weibo_id": 3,
      "user_id": 1
    }
  ]
}
17:53:47 完整请求
17:53:47 请求结束
17:53:47 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:53:47 path and query /weibo/index {} 
17:53:47 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
17:53:47 完整请求
17:53:47 完整请求
17:53:47 请求结束
17:53:47 请求结束
17:53:47 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:53:47 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:53:47 path and query /static {'file': 'gua.js'} 
17:53:47 path and query /static {'file': 'weibo.js'} 
17:53:47 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div>
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:53:47 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

17:53:47 完整请求
17:53:47 请求结束
17:53:47 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:53:47 path and query /api/weibo/all {} 
17:53:47 kwargs,  {'weibo_id': 2} <class 'dict'>
17:53:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  }
]
17:53:47 完整请求
17:53:47 请求结束
17:53:47 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:53:47 path and query /static {'file': 'weibo.js'} 
17:53:47 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div>
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

17:53:52 完整请求
17:53:52 请求结束
17:53:52 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:53:52 path and query /api/weibo/add {} {"content":"测试"}
17:53:52 kwargs,  {'weibo_id': 3} <class 'dict'>
17:53:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "content": "测试",
  "comments": [
    {
      "id": 6,
      "content": "123",
      "weibo_id": 3,
      "user_id": 1
    }
  ]
}
17:54:00 完整请求
17:54:00 请求结束
17:54:00 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:54:00 path and query /api/weibo/add {} {"content":"多加几个"}
17:54:00 kwargs,  {'weibo_id': 4} <class 'dict'>
17:54:00 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "content": "多加几个",
  "comments": []
}
17:54:05 完整请求
17:54:05 请求结束
17:54:05 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:54:05 path and query /api/weibo/add {} {"content":"然后继续"}
17:54:05 kwargs,  {'weibo_id': 5} <class 'dict'>
17:54:05 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "然后继续",
  "comments": []
}
17:54:11 完整请求
17:54:11 请求结束
17:54:11 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:54:11 path and query /api/weibo/add {} {"content":"围绕"}
17:54:11 kwargs,  {'weibo_id': 6} <class 'dict'>
17:54:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "content": "围绕",
  "comments": []
}
17:54:27 完整请求
17:54:27 请求结束
17:54:27 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
17:54:27 path and query /api/weibo/add {} {"content":"肚兜一闪"}
17:54:27 kwargs,  {'weibo_id': 7} <class 'dict'>
17:54:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "content": "肚兜一闪",
  "comments": []
}
18:00:16 完整请求
18:00:16 请求结束
18:00:16 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:00:16 path and query /weibo/index {} 
18:00:16 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:00:16 完整请求
18:00:16 完整请求
18:00:16 请求结束
18:00:16 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:00:16 请求结束
18:00:16 path and query /static {'file': 'gua.js'} 
18:00:16 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:00:16 path and query /static {'file': 'weibo.js'} 
18:00:16 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:00:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div>
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self', self)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:00:16 完整请求
18:00:16 请求结束
18:00:16 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:00:16 path and query /api/weibo/all {} 
18:00:16 kwargs,  {'weibo_id': 2} <class 'dict'>
18:00:16 kwargs,  {'weibo_id': 3} <class 'dict'>
18:00:16 kwargs,  {'weibo_id': 4} <class 'dict'>
18:00:16 kwargs,  {'weibo_id': 5} <class 'dict'>
18:00:16 kwargs,  {'weibo_id': 6} <class 'dict'>
18:00:16 完整请求
18:00:16 请求结束
18:00:16 kwargs,  {'weibo_id': 7} <class 'dict'>
18:00:16 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:00:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:00:16 path and query /static {'file': 'weibo.js'} 
18:00:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div>
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self', self)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:01:07 完整请求
18:01:07 请求结束
18:01:07 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:01:07 path and query /weibo/index {} 
18:01:07 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:01:07 完整请求
18:01:07 请求结束
18:01:07 请求结束
18:01:07 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:01:07 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:01:07 path and query /static {'file': 'weibo.js'} 
18:01:07 path and query /static {'file': 'gua.js'} 
18:01:07 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:01:08 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div>
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self', self)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            // var weiboCell = self.parentElement
            insertEditForm(self)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:01:08 完整请求
18:01:08 请求结束
18:01:08 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:01:08 path and query /api/weibo/all {} 
18:01:08 kwargs,  {'weibo_id': 2} <class 'dict'>
18:01:08 kwargs,  {'weibo_id': 3} <class 'dict'>
18:01:08 完整请求
18:01:08 kwargs,  {'weibo_id': 4} <class 'dict'>
18:01:08 请求结束
18:01:08 kwargs,  {'weibo_id': 5} <class 'dict'>
18:01:08 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:01:08 kwargs,  {'weibo_id': 6} <class 'dict'>
18:01:08 kwargs,  {'weibo_id': 7} <class 'dict'>
18:01:08 path and query /static {'file': 'weibo.js'} 
18:01:08 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
iv>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self', self)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            // var weiboCell = self.parentElement
            insertEditForm(self)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:01:37 完整请求
18:01:37 请求结束
18:01:37 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:01:37 path and query /weibo/index {} 
18:01:37 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:01:37 完整请求
18:01:37 完整请求
18:01:37 请求结束
18:01:37 请求结束
18:01:37 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:01:37 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:01:37 path and query /static {'file': 'weibo.js'} 
18:01:37 path and query /static {'file': 'gua.js'} 
18:01:37 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:01:37 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div>
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self', self)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:01:37 完整请求
18:01:37 请求结束
18:01:37 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:01:38 path and query /api/weibo/all {} 
18:01:38 kwargs,  {'weibo_id': 2} <class 'dict'>
18:01:38 kwargs,  {'weibo_id': 3} <class 'dict'>
18:01:38 kwargs,  {'weibo_id': 4} <class 'dict'>
18:01:38 完整请求
18:01:38 请求结束
18:01:38 kwargs,  {'weibo_id': 5} <class 'dict'>
18:01:38 kwargs,  {'weibo_id': 6} <class 'dict'>
18:01:38 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:01:38 path and query /static {'file': 'weibo.js'} 
18:01:38 kwargs,  {'weibo_id': 7} <class 'dict'>
18:01:38 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:01:38 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div>
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self', self)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:04:31 完整请求
18:04:31 请求结束
18:04:31 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:04:31 path and query /weibo/index {} 
18:04:31 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:04:31 完整请求
18:04:31 完整请求
18:04:31 请求结束
18:04:31 请求结束
18:04:31 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:04:31 path and query /static {'file': 'weibo.js'} 
18:04:31 path and query /static {'file': 'gua.js'} 
18:04:31 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div>
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self', self)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:04:31 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:04:31 完整请求
18:04:31 请求结束
18:04:31 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:04:31 path and query /api/weibo/all {} 
18:04:31 kwargs,  {'weibo_id': 2} <class 'dict'>
18:04:31 kwargs,  {'weibo_id': 3} <class 'dict'>
18:04:31 完整请求
18:04:31 请求结束
18:04:31 kwargs,  {'weibo_id': 4} <class 'dict'>
18:04:31 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:04:31 kwargs,  {'weibo_id': 5} <class 'dict'>
18:04:31 path and query /static {'file': 'weibo.js'} 
18:04:31 kwargs,  {'weibo_id': 6} <class 'dict'>
18:04:31 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div>
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell) {
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input">
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforeend', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self', self)
        if(self.classList.contains('weibo-edit')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            insertEditForm(weiboCell)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
//    bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:04:31 kwargs,  {'weibo_id': 7} <class 'dict'>
18:04:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:29:47 完整请求
18:29:47 请求结束
18:29:47 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:29:47 path and query /weibo/index {} 
18:29:47 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:29:47 完整请求
18:29:47 完整请求
18:29:47 请求结束
18:29:47 请求结束
18:29:47 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:29:47 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:29:47 path and query /static {'file': 'weibo.js'} 
18:29:47 path and query /static {'file': 'gua.js'} 
18:29:47 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforebegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = e('.weibo-content')
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:29:47 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:29:47 完整请求
18:29:47 请求结束
18:29:47 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:29:47 path and query /api/weibo/all {} 
18:29:47 kwargs,  {'weibo_id': 2} <class 'dict'>
18:29:47 kwargs,  {'weibo_id': 3} <class 'dict'>
18:29:47 kwargs,  {'weibo_id': 4} <class 'dict'>
18:29:47 kwargs,  {'weibo_id': 5} <class 'dict'>
18:29:47 完整请求
18:29:47 请求结束
18:29:47 kwargs,  {'weibo_id': 6} <class 'dict'>
18:29:47 kwargs,  {'weibo_id': 7} <class 'dict'>
18:29:47 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:29:47 path and query /static {'file': 'weibo.js'} 
18:29:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:29:47 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforebegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = e('.weibo-content')
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:30:10 完整请求
18:30:10 请求结束
18:30:10 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:30:10 path and query /weibo/index {} 
18:30:10 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:30:10 完整请求
18:30:10 请求结束
18:30:10 请求结束
18:30:10 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:30:10 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:30:10 path and query /static {'file': 'weibo.js'} 
18:30:10 path and query /static {'file': 'gua.js'} 
18:30:10 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:30:10 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforebegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = e('.weibo-content')
            content.remove()
            insertEditForm(weiboCell, content)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:30:10 完整请求
18:30:10 请求结束
18:30:10 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:30:10 path and query /api/weibo/all {} 
18:30:10 kwargs,  {'weibo_id': 2} <class 'dict'>
18:30:10 kwargs,  {'weibo_id': 3} <class 'dict'>
18:30:10 kwargs,  {'weibo_id': 4} <class 'dict'>
18:30:10 完整请求
18:30:10 请求结束
18:30:10 kwargs,  {'weibo_id': 5} <class 'dict'>
18:30:10 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:30:10 kwargs,  {'weibo_id': 6} <class 'dict'>
18:30:10 kwargs,  {'weibo_id': 7} <class 'dict'>
18:30:10 path and query /static {'file': 'weibo.js'} 
18:30:10 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('beforebegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = e('.weibo-content')
            content.remove()
            insertEditForm(weiboCell, content)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:30:10 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:32:09 完整请求
18:32:09 请求结束
18:32:09 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:32:09 path and query /weibo/index {} 
18:32:09 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:32:09 完整请求
18:32:09 完整请求
18:32:09 请求结束
18:32:09 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:32:09 请求结束
18:32:09 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:32:09 path and query /static {'file': 'gua.js'} 
18:32:09 path and query /static {'file': 'weibo.js'} 
18:32:09 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:32:09 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = e('.weibo-content')
            insertEditForm(weiboCell, content)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:32:09 完整请求
18:32:09 请求结束
18:32:09 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:32:09 path and query /api/weibo/all {} 
18:32:09 kwargs,  {'weibo_id': 2} <class 'dict'>
18:32:09 kwargs,  {'weibo_id': 3} <class 'dict'>
18:32:09 kwargs,  {'weibo_id': 4} <class 'dict'>
18:32:09 完整请求
18:32:09 请求结束
18:32:09 kwargs,  {'weibo_id': 5} <class 'dict'>
18:32:09 kwargs,  {'weibo_id': 6} <class 'dict'>
18:32:09 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:32:09 path and query /static {'file': 'weibo.js'} 
18:32:09 kwargs,  {'weibo_id': 7} <class 'dict'>
18:32:09 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = e('.weibo-content')
            insertEditForm(weiboCell, content)
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:32:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:34:40 完整请求
18:34:40 请求结束
18:34:40 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:34:40 path and query /weibo/index {} 
18:34:40 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:34:40 完整请求
18:34:40 请求结束
18:34:40 请求结束
18:34:40 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:34:40 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:34:40 path and query /static {'file': 'weibo.js'} 
18:34:40 path and query /static {'file': 'gua.js'} 
18:34:40 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.childNodes[0]
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:34:40 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:34:41 完整请求
18:34:41 请求结束
18:34:41 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:34:41 path and query /api/weibo/all {} 
18:34:41 kwargs,  {'weibo_id': 2} <class 'dict'>
18:34:41 kwargs,  {'weibo_id': 3} <class 'dict'>
18:34:41 完整请求
18:34:41 请求结束
18:34:41 kwargs,  {'weibo_id': 4} <class 'dict'>
18:34:41 kwargs,  {'weibo_id': 5} <class 'dict'>
18:34:41 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:34:41 path and query /static {'file': 'weibo.js'} 
18:34:41 kwargs,  {'weibo_id': 6} <class 'dict'>
18:34:41 kwargs,  {'weibo_id': 7} <class 'dict'>
18:34:41 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.childNodes[0]
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:34:41 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:35:30 完整请求
18:35:30 请求结束
18:35:30 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:35:30 path and query /weibo/index {} 
18:35:30 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:35:30 完整请求
18:35:30 完整请求
18:35:30 请求结束
18:35:30 请求结束
18:35:30 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:35:30 path and query /static {'file': 'weibo.js'} 
18:35:30 path and query /static {'file': 'gua.js'} 
18:35:30 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:35:30 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.childNodes
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:35:30 完整请求
18:35:30 请求结束
18:35:30 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:35:30 path and query /api/weibo/all {} 
18:35:30 kwargs,  {'weibo_id': 2} <class 'dict'>
18:35:30 kwargs,  {'weibo_id': 3} <class 'dict'>
18:35:30 kwargs,  {'weibo_id': 4} <class 'dict'>
18:35:30 完整请求
18:35:30 请求结束
18:35:30 kwargs,  {'weibo_id': 5} <class 'dict'>
18:35:30 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:35:30 kwargs,  {'weibo_id': 6} <class 'dict'>
18:35:30 path and query /static {'file': 'weibo.js'} 
18:35:30 kwargs,  {'weibo_id': 7} <class 'dict'>
18:35:30 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:35:30 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.childNodes
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:37:03 完整请求
18:37:03 请求结束
18:37:03 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:37:03 path and query /weibo/index {} 
18:37:03 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:37:03 完整请求
18:37:03 完整请求
18:37:03 请求结束
18:37:03 请求结束
18:37:03 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:37:03 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:37:04 path and query /static {'file': 'gua.js'} 

18:37:04 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.childNodes[4]
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:37:04 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:37:04 完整请求
18:37:04 请求结束
18:37:04 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:37:04 path and query /api/weibo/all {} 
18:37:04 kwargs,  {'weibo_id': 2} <class 'dict'>
18:37:04 kwargs,  {'weibo_id': 3} <class 'dict'>
18:37:04 完整请求
18:37:04 请求结束
18:37:04 kwargs,  {'weibo_id': 4} <class 'dict'>
18:37:04 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:37:04 kwargs,  {'weibo_id': 5} <class 'dict'>
18:37:04 path and query /static {'file': 'weibo.js'} 
18:37:04 kwargs,  {'weibo_id': 6} <class 'dict'>
18:37:04 kwargs,  {'weibo_id': 7} <class 'dict'>
18:37:04 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.childNodes[4]
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:37:04 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:37:13 完整请求
18:37:13 请求结束
18:37:13 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:37:13 path and query /weibo/index {} 
18:37:13 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:37:14 完整请求
18:37:14 完整请求
18:37:14 请求结束
18:37:14 请求结束
18:37:14 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:37:14 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:37:14 path and query /static {'file': 'weibo.js'} 
18:37:14 path and query /static {'file': 'gua.js'} 
18:37:14 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:37:14 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.childNodes[3]
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:37:14 完整请求
18:37:14 请求结束
18:37:14 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:37:14 path and query /api/weibo/all {} 
18:37:14 kwargs,  {'weibo_id': 2} <class 'dict'>
18:37:14 kwargs,  {'weibo_id': 3} <class 'dict'>
18:37:14 完整请求
18:37:14 请求结束
18:37:14 kwargs,  {'weibo_id': 4} <class 'dict'>
18:37:14 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:37:14 kwargs,  {'weibo_id': 5} <class 'dict'>
18:37:14 kwargs,  {'weibo_id': 6} <class 'dict'>
18:37:14 path and query /static {'file': 'weibo.js'} 
18:37:14 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.childNodes[3]
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:37:14 kwargs,  {'weibo_id': 7} <class 'dict'>
18:37:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:37:29 完整请求
18:37:29 请求结束
18:37:29 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:37:29 path and query /weibo/index {} 
18:37:29 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:37:29 完整请求
18:37:29 完整请求
18:37:29 请求结束
18:37:29 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:37:29 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:37:29 path and query /static {'file': 'gua.js'} 
18:37:29 path and query /static {'file': 'weibo.js'} 
18:37:29 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.childNodes
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:37:29 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:37:29 完整请求
18:37:29 请求结束
18:37:29 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:37:29 path and query /api/weibo/all {} 
18:37:29 kwargs,  {'weibo_id': 2} <class 'dict'>
18:37:29 kwargs,  {'weibo_id': 3} <class 'dict'>
18:37:29 完整请求
18:37:29 请求结束
18:37:29 kwargs,  {'weibo_id': 4} <class 'dict'>
18:37:29 kwargs,  {'weibo_id': 5} <class 'dict'>
18:37:29 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:37:29 path and query /static {'file': 'weibo.js'} 
18:37:29 kwargs,  {'weibo_id': 6} <class 'dict'>
18:37:29 kwargs,  {'weibo_id': 7} <class 'dict'>
18:37:29 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.childNodes
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:37:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:40:06 完整请求
18:40:06 请求结束
18:40:06 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:40:06 path and query /weibo/index {} 
18:40:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:40:06 完整请求
18:40:06 完整请求
18:40:06 请求结束
18:40:06 请求结束
18:40:06 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:40:06 path and query /static {'file': 'gua.js'} 
18:40:06 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:40:06 path and query /static {'file': 'weibo.js'} 
18:40:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:40:06 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.nextSibling
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:40:06 完整请求
18:40:06 请求结束
18:40:06 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:40:06 path and query /api/weibo/all {} 
18:40:06 kwargs,  {'weibo_id': 2} <class 'dict'>
18:40:06 kwargs,  {'weibo_id': 3} <class 'dict'>
18:40:06 完整请求
18:40:06 请求结束
18:40:06 kwargs,  {'weibo_id': 4} <class 'dict'>
18:40:06 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:40:06 kwargs,  {'weibo_id': 5} <class 'dict'>
18:40:06 path and query /static {'file': 'weibo.js'} 
18:40:06 kwargs,  {'weibo_id': 6} <class 'dict'>
18:40:06 kwargs,  {'weibo_id': 7} <class 'dict'>
18:40:06 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.nextSibling
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:40:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:40:48 完整请求
18:40:48 请求结束
18:40:48 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:40:48 path and query /weibo/index {} 
18:40:48 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:40:48 完整请求
18:40:48 完整请求
18:40:48 请求结束
18:40:48 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:40:48 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:40:48 path and query /static {'file': 'weibo.js'} 
18:40:48 path and query /static {'file': 'gua.js'} 
18:40:48 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:40:48 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.firstChild
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:40:48 完整请求
18:40:48 请求结束
18:40:48 完整请求
18:40:48 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:40:48 请求结束
18:40:48 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:40:48 path and query /api/weibo/all {} 
18:40:48 path and query /static {'file': 'weibo.js'} 
18:40:48 kwargs,  {'weibo_id': 2} <class 'dict'>
18:40:48 kwargs,  {'weibo_id': 3} <class 'dict'>
18:40:48 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.firstChild
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:40:48 kwargs,  {'weibo_id': 4} <class 'dict'>
18:40:48 kwargs,  {'weibo_id': 5} <class 'dict'>
18:40:48 kwargs,  {'weibo_id': 6} <class 'dict'>
18:40:48 kwargs,  {'weibo_id': 7} <class 'dict'>
18:40:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:42:17 完整请求
18:42:17 请求结束
18:42:17 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:42:17 path and query /weibo/index {} 
18:42:17 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:42:17 完整请求
18:42:17 完整请求
18:42:17 请求结束
18:42:17 请求结束
18:42:17 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:42:17 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:42:17 path and query /static {'file': 'gua.js'} 
18:42:17 path and query /static {'file': 'weibo.js'} 
18:42:17 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:42:17 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.childNodes
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:42:17 完整请求
18:42:17 请求结束
18:42:17 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:42:17 path and query /api/weibo/all {} 
18:42:17 kwargs,  {'weibo_id': 2} <class 'dict'>
18:42:17 kwargs,  {'weibo_id': 3} <class 'dict'>
18:42:17 kwargs,  {'weibo_id': 4} <class 'dict'>
18:42:17 完整请求
18:42:17 kwargs,  {'weibo_id': 5} <class 'dict'>
18:42:17 请求结束
18:42:17 kwargs,  {'weibo_id': 6} <class 'dict'>
18:42:17 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:42:17 path and query /static {'file': 'weibo.js'} 
18:42:17 kwargs,  {'weibo_id': 7} <class 'dict'>
18:42:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:42:17 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.childNodes
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:43:36 完整请求
18:43:36 请求结束
18:43:36 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:43:36 path and query /weibo/index {} 
18:43:36 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:43:36 完整请求
18:43:36 完整请求
18:43:36 请求结束
18:43:36 请求结束
18:43:36 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:43:36 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:43:36 path and query /static {'file': 'weibo.js'} 
18:43:36 path and query /static {'file': 'gua.js'} 
18:43:36 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.childNodes('weibo-content')
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:43:36 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:43:36 完整请求
18:43:36 请求结束
18:43:36 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:43:36 path and query /api/weibo/all {} 
18:43:36 kwargs,  {'weibo_id': 2} <class 'dict'>
18:43:36 kwargs,  {'weibo_id': 3} <class 'dict'>
18:43:36 完整请求
18:43:36 请求结束
18:43:36 kwargs,  {'weibo_id': 4} <class 'dict'>
18:43:36 kwargs,  {'weibo_id': 5} <class 'dict'>
18:43:36 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:43:36 kwargs,  {'weibo_id': 6} <class 'dict'>
18:43:36 path and query /static {'file': 'weibo.js'} 
18:43:36 kwargs,  {'weibo_id': 7} <class 'dict'>
18:43:36 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.childNodes('weibo-content')
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:43:36 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:43:50 完整请求
18:43:50 请求结束
18:43:50 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:43:50 path and query /weibo/index {} 
18:43:50 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:43:50 完整请求
18:43:50 完整请求
18:43:50 请求结束
18:43:50 请求结束
18:43:50 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:43:50 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:43:50 path and query /static {'file': 'weibo.js'} 
18:43:50 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:43:50 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.childNodes['weibo-content']
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:43:50 完整请求
18:43:50 请求结束
18:43:50 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:43:50 path and query /api/weibo/all {} 
18:43:50 kwargs,  {'weibo_id': 2} <class 'dict'>
18:43:50 kwargs,  {'weibo_id': 3} <class 'dict'>
18:43:50 完整请求
18:43:50 请求结束
18:43:50 kwargs,  {'weibo_id': 4} <class 'dict'>
18:43:50 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:43:50 kwargs,  {'weibo_id': 5} <class 'dict'>
18:43:50 kwargs,  {'weibo_id': 6} <class 'dict'>
18:43:50 path and query /static {'file': 'weibo.js'} 
18:43:50 kwargs,  {'weibo_id': 7} <class 'dict'>
18:43:50 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.childNodes['weibo-content']
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:43:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:44:05 完整请求
18:44:05 请求结束
18:44:05 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:44:05 path and query /weibo/index {} 
18:44:05 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:44:05 完整请求
18:44:05 完整请求
18:44:05 请求结束
18:44:05 请求结束
18:44:05 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:44:05 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:44:05 path and query /static {'file': 'gua.js'} 
18:44:05 path and query /static {'file': 'weibo.js'} 
18:44:05 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.childNodes['div.weibo-content']
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:44:05 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:44:05 完整请求
18:44:05 请求结束
18:44:05 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:44:05 path and query /api/weibo/all {} 
18:44:05 kwargs,  {'weibo_id': 2} <class 'dict'>
18:44:05 kwargs,  {'weibo_id': 3} <class 'dict'>
18:44:05 完整请求
18:44:05 请求结束
18:44:05 kwargs,  {'weibo_id': 4} <class 'dict'>
18:44:05 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:44:05 kwargs,  {'weibo_id': 5} <class 'dict'>
18:44:05 kwargs,  {'weibo_id': 6} <class 'dict'>
18:44:05 path and query /static {'file': 'weibo.js'} 
18:44:05 kwargs,  {'weibo_id': 7} <class 'dict'>
18:44:05 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.childNodes['div.weibo-content']
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:44:05 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:44:16 完整请求
18:44:16 请求结束
18:44:16 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:44:16 path and query /weibo/index {} 
18:44:16 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:44:16 完整请求
18:44:16 完整请求
18:44:16 请求结束
18:44:16 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:44:16 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:44:16 path and query /static {'file': 'gua.js'} 
18:44:16 path and query /static {'file': 'weibo.js'} 
18:44:16 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:44:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.childNodes[div.weibo-content]
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:44:16 完整请求
18:44:16 请求结束
18:44:16 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:44:16 path and query /api/weibo/all {} 
18:44:16 kwargs,  {'weibo_id': 2} <class 'dict'>
18:44:16 kwargs,  {'weibo_id': 3} <class 'dict'>
18:44:16 完整请求
18:44:16 请求结束
18:44:16 kwargs,  {'weibo_id': 4} <class 'dict'>
18:44:16 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:44:16 kwargs,  {'weibo_id': 5} <class 'dict'>
18:44:16 path and query /static {'file': 'weibo.js'} 
18:44:16 kwargs,  {'weibo_id': 6} <class 'dict'>
18:44:16 kwargs,  {'weibo_id': 7} <class 'dict'>
18:44:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.childNodes[div.weibo-content]
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:44:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:46:13 完整请求
18:46:13 请求结束
18:46:13 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:46:13 path and query /weibo/index {} 
18:46:13 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:46:13 完整请求
18:46:13 完整请求
18:46:13 请求结束
18:46:13 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:46:13 请求结束
18:46:13 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:46:13 path and query /static {'file': 'gua.js'} 
18:46:13 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:46:13 path and query /static {'file': 'weibo.js'} 
18:46:13 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.Children
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:46:13 完整请求
18:46:13 请求结束
18:46:13 完整请求
18:46:13 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:46:13 请求结束
18:46:13 path and query /api/weibo/all {} 
fb70-4426-980a-ab19cafcd65d']
18:46:13 kwargs,  {'weibo_id': 2} <class 'dict'>
18:46:13 path and query /static {'file': 'weibo.js'} 
18:46:13 kwargs,  {'weibo_id': 3} <class 'dict'>
18:46:13 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.Children
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:46:13 kwargs,  {'weibo_id': 4} <class 'dict'>
18:46:13 kwargs,  {'weibo_id': 5} <class 'dict'>
18:46:13 kwargs,  {'weibo_id': 6} <class 'dict'>
18:46:13 kwargs,  {'weibo_id': 7} <class 'dict'>
18:46:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:47:20 完整请求
18:47:20 请求结束
18:47:20 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:47:20 path and query /weibo/index {} 
18:47:20 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:47:20 完整请求
18:47:20 完整请求
18:47:20 请求结束
18:47:20 请求结束
18:47:20 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:47:20 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:47:20 path and query /static {'file': 'gua.js'} 
18:47:20 path and query /static {'file': 'weibo.js'} 
18:47:20 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:47:20 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:47:21 完整请求
18:47:21 请求结束
18:47:21 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:47:21 path and query /api/weibo/all {} 
18:47:21 kwargs,  {'weibo_id': 2} <class 'dict'>
18:47:21 完整请求
18:47:21 kwargs,  {'weibo_id': 3} <class 'dict'>
18:47:21 请求结束
18:47:21 kwargs,  {'weibo_id': 4} <class 'dict'>
18:47:21 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:47:21 kwargs,  {'weibo_id': 5} <class 'dict'>
18:47:21 kwargs,  {'weibo_id': 6} <class 'dict'>
18:47:21 path and query /static {'file': 'weibo.js'} 
18:47:21 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:47:21 kwargs,  {'weibo_id': 7} <class 'dict'>
18:47:21 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:47:39 完整请求
18:47:39 请求结束
18:47:39 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:47:39 path and query /weibo/index {} 
18:47:39 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:47:39 完整请求
18:47:39 完整请求
18:47:39 请求结束
18:47:39 请求结束
18:47:39 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:47:39 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:47:40 path and query /static {'file': 'weibo.js'} 
18:47:40 path and query /static {'file': 'gua.js'} 
18:47:40 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:47:40 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[1]
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:47:40 完整请求
18:47:40 请求结束
18:47:40 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:47:40 path and query /api/weibo/all {} 
18:47:40 kwargs,  {'weibo_id': 2} <class 'dict'>
18:47:40 kwargs,  {'weibo_id': 3} <class 'dict'>
18:47:40 完整请求
18:47:40 请求结束
18:47:40 kwargs,  {'weibo_id': 4} <class 'dict'>
18:47:40 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:47:40 kwargs,  {'weibo_id': 5} <class 'dict'>
18:47:40 path and query /static {'file': 'weibo.js'} 
18:47:40 kwargs,  {'weibo_id': 6} <class 'dict'>
18:47:40 kwargs,  {'weibo_id': 7} <class 'dict'>
18:47:40 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[1]
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:47:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:47:53 完整请求
18:47:53 请求结束
18:47:53 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:47:53 path and query /weibo/index {} 
18:47:53 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:47:53 完整请求
18:47:53 完整请求
18:47:53 请求结束
18:47:53 请求结束
18:47:53 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:47:53 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:47:53 path and query /static {'file': 'gua.js'} 
18:47:53 path and query /static {'file': 'weibo.js'} 
18:47:53 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:47:53 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:47:53 完整请求
18:47:53 请求结束
18:47:53 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:47:53 path and query /api/weibo/all {} 
18:47:53 kwargs,  {'weibo_id': 2} <class 'dict'>
18:47:53 完整请求
18:47:53 请求结束
18:47:53 kwargs,  {'weibo_id': 3} <class 'dict'>
18:47:53 kwargs,  {'weibo_id': 4} <class 'dict'>
18:47:53 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:47:53 path and query /static {'file': 'weibo.js'} 
18:47:53 kwargs,  {'weibo_id': 5} <class 'dict'>
18:47:53 kwargs,  {'weibo_id': 6} <class 'dict'>
18:47:53 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            log('content', content)
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:47:53 kwargs,  {'weibo_id': 7} <class 'dict'>
18:47:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:48:08 完整请求
18:48:08 请求结束
18:48:08 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:48:08 path and query /weibo/index {} 
18:48:08 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:48:08 完整请求
18:48:08 完整请求
18:48:08 请求结束
18:48:08 请求结束
18:48:09 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:48:09 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:48:09 path and query /static {'file': 'weibo.js'} 
18:48:09 path and query /static {'file': 'gua.js'} 
18:48:09 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:48:09 完整请求
18:48:09 请求结束
18:48:09 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:48:09 path and query /api/weibo/all {} 
18:48:09 kwargs,  {'weibo_id': 2} <class 'dict'>
18:48:09 完整请求
18:48:09 请求结束
18:48:09 kwargs,  {'weibo_id': 3} <class 'dict'>
18:48:09 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:48:09 kwargs,  {'weibo_id': 4} <class 'dict'>
18:48:09 path and query /static {'file': 'weibo.js'} 
18:48:09 kwargs,  {'weibo_id': 5} <class 'dict'>
18:48:09 kwargs,  {'weibo_id': 6} <class 'dict'>
18:48:09 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, content) {
    var value = content.value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            insertEditForm(weiboCell, content)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:48:09 kwargs,  {'weibo_id': 7} <class 'dict'>
18:48:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:49:07 完整请求
18:49:07 请求结束
18:49:07 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:49:07 path and query /weibo/index {} 
18:49:07 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:49:07 完整请求
18:49:07 完整请求
18:49:07 请求结束
18:49:07 请求结束
18:49:07 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:49:07 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:49:07 path and query /static {'file': 'weibo.js'} 
18:49:07 path and query /static {'file': 'gua.js'} 
18:49:07 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:49:07 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, value) {
    var value = value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var value = content.value
            insertEditForm(weiboCell, value)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:49:07 完整请求
18:49:07 请求结束
18:49:07 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:49:07 path and query /api/weibo/all {} 
18:49:07 kwargs,  {'weibo_id': 2} <class 'dict'>
18:49:07 完整请求
18:49:07 请求结束
18:49:07 kwargs,  {'weibo_id': 3} <class 'dict'>
18:49:08 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:49:08 kwargs,  {'weibo_id': 4} <class 'dict'>
18:49:08 path and query /static {'file': 'weibo.js'} 
18:49:08 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, value) {
    var value = value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var value = content.value
            insertEditForm(weiboCell, value)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:49:08 kwargs,  {'weibo_id': 5} <class 'dict'>
18:49:08 kwargs,  {'weibo_id': 6} <class 'dict'>
18:49:08 kwargs,  {'weibo_id': 7} <class 'dict'>
18:49:08 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:49:10 完整请求
18:49:10 请求结束
18:49:10 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:49:10 path and query /weibo/index {} 
18:49:10 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:49:10 完整请求
18:49:10 请求结束
18:49:10 请求结束
18:49:10 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:49:10 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:49:10 path and query /static {'file': 'gua.js'} 
18:49:10 path and query /static {'file': 'weibo.js'} 
18:49:10 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, value) {
    var value = value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var value = content.value
            insertEditForm(weiboCell, value)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:49:10 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:49:10 完整请求
18:49:10 请求结束
18:49:10 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:49:10 path and query /api/weibo/all {} 
18:49:10 kwargs,  {'weibo_id': 2} <class 'dict'>
18:49:10 完整请求
18:49:10 请求结束
18:49:10 kwargs,  {'weibo_id': 3} <class 'dict'>
18:49:11 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:49:11 path and query /static {'file': 'weibo.js'} 
18:49:11 kwargs,  {'weibo_id': 5} <class 'dict'>
18:49:11 kwargs,  {'weibo_id': 6} <class 'dict'>
18:49:11 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, value) {
    var value = value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var value = content.value
            insertEditForm(weiboCell, value)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:49:11 kwargs,  {'weibo_id': 7} <class 'dict'>
18:49:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:49:43 完整请求
18:49:43 请求结束
18:49:43 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:49:43 path and query /weibo/index {} 
18:49:43 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:49:44 完整请求
18:49:44 完整请求
18:49:44 请求结束
18:49:44 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:49:44 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:49:44 path and query /static {'file': 'weibo.js'} 
18:49:44 path and query /static {'file': 'gua.js'} 
18:49:44 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, value) {
    var value = value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var value = content.value
            log('content', content)
            log('value', value)
            insertEditForm(weiboCell, value)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:49:44 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:49:44 完整请求
18:49:44 请求结束
18:49:44 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:49:44 path and query /api/weibo/all {} 
18:49:44 完整请求
18:49:44 kwargs,  {'weibo_id': 2} <class 'dict'>
18:49:44 请求结束
18:49:44 kwargs,  {'weibo_id': 3} <class 'dict'>
18:49:44 kwargs,  {'weibo_id': 4} <class 'dict'>
18:49:44 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:49:44 kwargs,  {'weibo_id': 5} <class 'dict'>
18:49:44 path and query /static {'file': 'weibo.js'} 
18:49:44 kwargs,  {'weibo_id': 6} <class 'dict'>
18:49:44 kwargs,  {'weibo_id': 7} <class 'dict'>
18:49:44 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, value) {
    var value = value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var value = content.value
            log('content', content)
            log('value', value)
            insertEditForm(weiboCell, value)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:49:44 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:51:16 完整请求
18:51:16 请求结束
18:51:16 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:51:16 path and query /weibo/index {} 
18:51:16 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:51:16 完整请求
18:51:16 完整请求
18:51:16 请求结束
18:51:16 请求结束
18:51:16 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:51:16 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:51:16 path and query /static {'file': 'gua.js'} 

18:51:16 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:51:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, value) {
    var value = value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var value = content.textContent
            log('content', content)
            log('value', value)
            insertEditForm(weiboCell, value)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:51:16 完整请求
18:51:16 请求结束
18:51:16 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:51:16 path and query /api/weibo/all {} 
18:51:16 kwargs,  {'weibo_id': 2} <class 'dict'>
18:51:16 完整请求
18:51:16 请求结束
18:51:16 kwargs,  {'weibo_id': 3} <class 'dict'>
18:51:16 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:51:16 kwargs,  {'weibo_id': 4} <class 'dict'>
18:51:16 path and query /static {'file': 'weibo.js'} 
18:51:16 kwargs,  {'weibo_id': 5} <class 'dict'>
18:51:16 kwargs,  {'weibo_id': 6} <class 'dict'>
18:51:16 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, value) {
    var value = value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var value = content.textContent
            log('content', content)
            log('value', value)
            insertEditForm(weiboCell, value)
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:51:16 kwargs,  {'weibo_id': 7} <class 'dict'>
18:51:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:56:28 完整请求
18:56:28 请求结束
18:56:28 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:56:28 path and query /weibo/index {} 
18:56:28 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:56:28 完整请求
18:56:28 完整请求
18:56:28 请求结束
18:56:28 请求结束
18:56:28 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:56:28 path and query /static {'file': 'weibo.js'} 
18:56:28 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:56:28 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, value) {
    var value = value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var value = content.textContent.
            log('content', content)
            log('value', value)
            insertEditForm(weiboCell, value.replace(/(^\s*)|(\s*$)/g, ""))
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:56:28 完整请求
18:56:28 请求结束
18:56:28 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:56:28 path and query /api/weibo/all {} 
18:56:28 kwargs,  {'weibo_id': 2} <class 'dict'>
18:56:28 kwargs,  {'weibo_id': 3} <class 'dict'>
18:56:28 完整请求
18:56:28 请求结束
18:56:28 kwargs,  {'weibo_id': 4} <class 'dict'>
18:56:29 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:56:29 kwargs,  {'weibo_id': 5} <class 'dict'>
18:56:29 path and query /static {'file': 'weibo.js'} 
18:56:29 kwargs,  {'weibo_id': 6} <class 'dict'>
18:56:29 kwargs,  {'weibo_id': 7} <class 'dict'>
18:56:29 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, value) {
    var value = value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var value = content.textContent.
            log('content', content)
            log('value', value)
            insertEditForm(weiboCell, value.replace(/(^\s*)|(\s*$)/g, ""))
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:56:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
18:56:48 完整请求
18:56:48 请求结束
18:56:48 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:56:48 path and query /weibo/index {} 
18:56:48 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
18:56:48 完整请求
18:56:48 完整请求
18:56:48 请求结束
18:56:48 请求结束
18:56:48 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:56:48 path and query /static {'file': 'weibo.js'} 
18:56:48 path and query /static {'file': 'gua.js'} 
18:56:48 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

18:56:48 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, value) {
    var value = value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var value = content.textContent
            log('content', content)
            log('value', value)
            insertEditForm(weiboCell, value.replace(/(^\s*)|(\s*$)/g, ""))
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:56:48 完整请求
18:56:48 请求结束
18:56:48 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:56:48 path and query /api/weibo/all {} 
18:56:48 kwargs,  {'weibo_id': 2} <class 'dict'>
18:56:48 完整请求
18:56:48 请求结束
18:56:48 kwargs,  {'weibo_id': 3} <class 'dict'>
18:56:48 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
18:56:48 kwargs,  {'weibo_id': 4} <class 'dict'>
18:56:48 path and query /static {'file': 'weibo.js'} 
18:56:48 kwargs,  {'weibo_id': 5} <class 'dict'>
18:56:48 kwargs,  {'weibo_id': 6} <class 'dict'>
18:56:48 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, value) {
    var value = value
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${value}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var value = content.textContent
            log('content', content)
            log('value', value)
            insertEditForm(weiboCell, value.replace(/(^\s*)|(\s*$)/g, ""))
            content.remove()
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

18:56:48 kwargs,  {'weibo_id': 7} <class 'dict'>
18:56:48 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
19:03:50 完整请求
19:03:50 请求结束
19:03:50 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:03:50 path and query /weibo/index {} 
19:03:50 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:03:50 完整请求
19:03:50 完整请求
19:03:50 请求结束
19:03:50 请求结束
19:03:50 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:03:50 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:03:50 path and query /static {'file': 'gua.js'} 
19:03:50 path and query /static {'file': 'weibo.js'} 
19:03:50 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

19:03:50 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var weibo_id = weiboCelll.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:03:51 完整请求
19:03:51 请求结束
19:03:51 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:03:51 path and query /api/weibo/all {} 
19:03:51 kwargs,  {'weibo_id': 2} <class 'dict'>
19:03:51 kwargs,  {'weibo_id': 3} <class 'dict'>
19:03:51 完整请求
19:03:51 请求结束
19:03:51 kwargs,  {'weibo_id': 4} <class 'dict'>
19:03:51 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:03:51 kwargs,  {'weibo_id': 5} <class 'dict'>
19:03:51 path and query /static {'file': 'weibo.js'} 
19:03:51 kwargs,  {'weibo_id': 6} <class 'dict'>
19:03:51 kwargs,  {'weibo_id': 7} <class 'dict'>
19:03:51 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var weibo_id = weiboCelll.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:03:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
19:04:06 完整请求
19:04:06 请求结束
19:04:15 完整请求
19:04:15 请求结束
19:04:22 完整请求
19:04:22 请求结束
19:04:22 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:04:22 path and query /weibo/index {} 
19:04:22 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:04:22 完整请求
19:04:22 完整请求
19:04:23 请求结束
19:04:23 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:04:23 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:04:23 path and query /static {'file': 'weibo.js'} 
19:04:23 path and query /static {'file': 'gua.js'} 
19:04:23 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:04:23 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

19:04:23 完整请求
19:04:23 请求结束
19:04:23 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:04:23 path and query /api/weibo/all {} 
19:04:23 kwargs,  {'weibo_id': 2} <class 'dict'>
19:04:23 kwargs,  {'weibo_id': 3} <class 'dict'>
19:04:23 完整请求
19:04:23 请求结束
19:04:23 kwargs,  {'weibo_id': 4} <class 'dict'>
19:04:23 kwargs,  {'weibo_id': 5} <class 'dict'>
19:04:23 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:04:23 path and query /static {'file': 'weibo.js'} 
19:04:23 kwargs,  {'weibo_id': 6} <class 'dict'>
19:04:23 kwargs,  {'weibo_id': 7} <class 'dict'>
19:04:23 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:04:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
19:04:24 完整请求
19:04:24 请求结束
19:04:24 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:04:24 path and query /api/weibo/all {} 
19:04:24 kwargs,  {'weibo_id': 2} <class 'dict'>
19:04:24 kwargs,  {'weibo_id': 3} <class 'dict'>
19:04:24 kwargs,  {'weibo_id': 4} <class 'dict'>
19:04:24 kwargs,  {'weibo_id': 5} <class 'dict'>
19:04:24 kwargs,  {'weibo_id': 6} <class 'dict'>
19:04:24 kwargs,  {'weibo_id': 7} <class 'dict'>
19:04:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
19:04:26 完整请求
19:04:26 请求结束
19:04:26 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:04:26 path and query /api/weibo/all {} 
19:04:26 kwargs,  {'weibo_id': 2} <class 'dict'>
19:04:26 kwargs,  {'weibo_id': 3} <class 'dict'>
19:04:26 kwargs,  {'weibo_id': 4} <class 'dict'>
19:04:26 kwargs,  {'weibo_id': 5} <class 'dict'>
19:04:26 kwargs,  {'weibo_id': 6} <class 'dict'>
19:04:26 kwargs,  {'weibo_id': 7} <class 'dict'>
19:04:26 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
19:05:52 完整请求
19:05:52 请求结束
19:05:52 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:05:52 path and query /weibo/index {} 
19:05:52 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:05:52 完整请求
19:05:52 完整请求
19:05:52 请求结束
19:05:52 请求结束
19:05:52 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:05:52 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:05:52 path and query /static {'file': 'gua.js'} 

19:05:52 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:05:52 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

19:05:52 完整请求
19:05:52 请求结束
19:05:52 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:05:52 path and query /api/weibo/all {} 
19:05:52 完整请求
19:05:52 请求结束
19:05:52 kwargs,  {'weibo_id': 2} <class 'dict'>
19:05:52 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:05:52 kwargs,  {'weibo_id': 3} <class 'dict'>
19:05:52 kwargs,  {'weibo_id': 4} <class 'dict'>
19:05:52 path and query /static {'file': 'weibo.js'} 
19:05:52 kwargs,  {'weibo_id': 5} <class 'dict'>
19:05:52 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'title': title,
            }
            apiweiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-title')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:05:52 kwargs,  {'weibo_id': 6} <class 'dict'>
19:05:52 kwargs,  {'weibo_id': 7} <class 'dict'>
19:05:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
19:05:53 完整请求
19:05:53 请求结束
19:05:53 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:05:53 path and query /api/weibo/all {} 
19:05:53 kwargs,  {'weibo_id': 2} <class 'dict'>
19:05:53 kwargs,  {'weibo_id': 3} <class 'dict'>
19:05:53 kwargs,  {'weibo_id': 4} <class 'dict'>
19:05:53 kwargs,  {'weibo_id': 5} <class 'dict'>
19:05:53 kwargs,  {'weibo_id': 6} <class 'dict'>
19:05:53 kwargs,  {'weibo_id': 7} <class 'dict'>
19:05:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
19:05:56 完整请求
19:05:56 请求结束
19:05:56 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:05:56 path and query /api/weibo/all {} 
19:05:56 kwargs,  {'weibo_id': 2} <class 'dict'>
19:05:56 kwargs,  {'weibo_id': 3} <class 'dict'>
19:05:56 kwargs,  {'weibo_id': 4} <class 'dict'>
19:05:56 kwargs,  {'weibo_id': 5} <class 'dict'>
19:05:56 kwargs,  {'weibo_id': 6} <class 'dict'>
19:05:56 kwargs,  {'weibo_id': 7} <class 'dict'>
19:05:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
19:05:59 完整请求
19:05:59 请求结束
19:05:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:05:59 path and query /api/weibo/all {} 
19:05:59 kwargs,  {'weibo_id': 2} <class 'dict'>
19:05:59 kwargs,  {'weibo_id': 3} <class 'dict'>
19:05:59 kwargs,  {'weibo_id': 4} <class 'dict'>
19:05:59 kwargs,  {'weibo_id': 5} <class 'dict'>
19:05:59 kwargs,  {'weibo_id': 6} <class 'dict'>
19:05:59 kwargs,  {'weibo_id': 7} <class 'dict'>
19:05:59 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
19:06:00 完整请求
19:06:00 请求结束
19:06:00 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:06:00 path and query /api/weibo/all {} 
19:06:00 kwargs,  {'weibo_id': 2} <class 'dict'>
19:06:00 kwargs,  {'weibo_id': 3} <class 'dict'>
19:06:00 kwargs,  {'weibo_id': 4} <class 'dict'>
19:06:00 kwargs,  {'weibo_id': 5} <class 'dict'>
19:06:00 kwargs,  {'weibo_id': 6} <class 'dict'>
19:06:00 kwargs,  {'weibo_id': 7} <class 'dict'>
19:06:00 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
19:06:01 完整请求
19:06:01 请求结束
19:06:01 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:06:01 path and query /api/weibo/all {} 
19:06:01 kwargs,  {'weibo_id': 2} <class 'dict'>
19:06:01 kwargs,  {'weibo_id': 3} <class 'dict'>
19:06:01 kwargs,  {'weibo_id': 4} <class 'dict'>
19:06:01 kwargs,  {'weibo_id': 5} <class 'dict'>
19:06:01 kwargs,  {'weibo_id': 6} <class 'dict'>
19:06:01 kwargs,  {'weibo_id': 7} <class 'dict'>
19:06:01 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
19:18:19 完整请求
19:18:19 请求结束
19:18:19 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:18:19 path and query /weibo/index {} 
19:18:19 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:18:19 完整请求
19:18:19 完整请求
19:18:19 请求结束
19:18:19 请求结束
19:18:19 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:18:19 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:18:19 path and query /static {'file': 'gua.js'} 
19:18:19 path and query /static {'file': 'weibo.js'} 
19:18:19 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weibocell = e('.weibo-cell')
    // 注意, 第二个参数可以直接给出定义函数
    weibocell.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:18:19 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}

19:18:19 完整请求
19:18:19 请求结束
19:18:19 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:18:19 path and query /static {'file': 'weibo.js'} 
19:18:19 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weibocell = e('.weibo-cell')
    // 注意, 第二个参数可以直接给出定义函数
    weibocell.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:18:29 完整请求
19:18:29 请求结束
19:19:55 完整请求
19:19:55 请求结束
19:19:55 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:19:55 path and query /weibo/index {} 
19:19:55 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:19:55 完整请求
19:19:55 完整请求
19:19:55 请求结束
19:19:55 请求结束
19:19:55 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:19:55 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:19:55 path and query /static {'file': 'weibo.js'} 
19:19:55 path and query /static {'file': 'gua.js'} 
19:19:56 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}

19:19:56 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:19:56 完整请求
19:19:56 请求结束
19:19:56 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:19:56 path and query /api/weibo/all {} 
19:19:56 kwargs,  {'weibo_id': 2} <class 'dict'>
19:19:56 完整请求
19:19:56 请求结束
19:19:56 kwargs,  {'weibo_id': 3} <class 'dict'>
19:19:56 kwargs,  {'weibo_id': 4} <class 'dict'>
19:19:56 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:19:56 path and query /static {'file': 'weibo.js'} 
19:19:56 kwargs,  {'weibo_id': 5} <class 'dict'>
19:19:56 kwargs,  {'weibo_id': 6} <class 'dict'>
19:19:56 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:19:56 kwargs,  {'weibo_id': 7} <class 'dict'>
19:19:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
19:19:58 完整请求
19:19:58 请求结束
19:19:58 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:19:58 path and query /api/weibo/all {} 
19:19:58 kwargs,  {'weibo_id': 2} <class 'dict'>
19:19:58 kwargs,  {'weibo_id': 3} <class 'dict'>
19:19:58 kwargs,  {'weibo_id': 4} <class 'dict'>
19:19:58 kwargs,  {'weibo_id': 5} <class 'dict'>
19:19:58 kwargs,  {'weibo_id': 6} <class 'dict'>
19:19:58 kwargs,  {'weibo_id': 7} <class 'dict'>
19:19:58 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
19:20:22 完整请求
19:20:22 请求结束
19:20:22 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:20:22 path and query /static {'file': 'gua.js'} 
19:20:22 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}

19:20:46 完整请求
19:20:46 请求结束
19:24:54 完整请求
19:24:54 请求结束
19:24:54 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:24:54 path and query /weibo/index {} 
19:24:54 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:24:54 完整请求
19:24:54 完整请求
19:24:54 请求结束
19:24:54 请求结束
19:24:54 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:24:54 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:24:54 path and query /static {'file': 'gua.js'} 
19:24:54 path and query /static {'file': 'weibo.js'} 
19:24:54 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}

19:24:54 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var title = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:24:54 完整请求
19:24:54 请求结束
19:24:54 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:24:54 path and query /api/weibo/all {} 
19:24:54 完整请求
19:24:54 请求结束
19:24:54 kwargs,  {'weibo_id': 2} <class 'dict'>
19:24:54 kwargs,  {'weibo_id': 3} <class 'dict'>
19:24:54 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:24:54 path and query /static {'file': 'gua.js'} 
19:24:54 kwargs,  {'weibo_id': 4} <class 'dict'>
19:24:54 kwargs,  {'weibo_id': 5} <class 'dict'>
19:24:54 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}

19:24:54 kwargs,  {'weibo_id': 6} <class 'dict'>
19:24:54 kwargs,  {'weibo_id': 7} <class 'dict'>
19:24:54 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
19:24:58 完整请求
19:24:58 请求结束
19:24:58 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:24:58 path and query /api/weibo/all {} 
19:24:58 kwargs,  {'weibo_id': 2} <class 'dict'>
19:24:58 kwargs,  {'weibo_id': 3} <class 'dict'>
19:24:58 kwargs,  {'weibo_id': 4} <class 'dict'>
19:24:58 kwargs,  {'weibo_id': 5} <class 'dict'>
19:24:58 kwargs,  {'weibo_id': 6} <class 'dict'>
19:24:58 kwargs,  {'weibo_id': 7} <class 'dict'>
19:24:58 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
19:26:45 完整请求
19:26:45 请求结束
19:26:45 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:26:45 path and query /weibo/index {} 
19:26:45 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:26:45 完整请求
19:26:45 完整请求
19:26:45 请求结束
19:26:45 请求结束
19:26:45 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:26:45 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:26:45 path and query /static {'file': 'weibo.js'} 
19:26:45 path and query /static {'file': 'gua.js'} 
19:26:45 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}

19:26:45 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:26:45 完整请求
19:26:45 请求结束
19:26:45 完整请求
19:26:45 请求结束
19:26:45 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:26:45 path and query /api/weibo/all {} 
19:26:45 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:26:45 path and query /static {'file': 'gua.js'} 
19:26:45 kwargs,  {'weibo_id': 2} <class 'dict'>
19:26:45 kwargs,  {'weibo_id': 3} <class 'dict'>
19:26:45 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}

19:26:45 kwargs,  {'weibo_id': 4} <class 'dict'>
19:26:45 kwargs,  {'weibo_id': 5} <class 'dict'>
19:26:45 kwargs,  {'weibo_id': 6} <class 'dict'>
19:26:45 kwargs,  {'weibo_id': 7} <class 'dict'>
19:26:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
19:26:47 完整请求
19:26:47 请求结束
19:26:47 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:26:47 path and query /api/weibo/all {} 
19:26:47 kwargs,  {'weibo_id': 2} <class 'dict'>
19:26:47 kwargs,  {'weibo_id': 3} <class 'dict'>
19:26:47 kwargs,  {'weibo_id': 4} <class 'dict'>
19:26:47 kwargs,  {'weibo_id': 5} <class 'dict'>
19:26:47 kwargs,  {'weibo_id': 6} <class 'dict'>
19:26:47 kwargs,  {'weibo_id': 7} <class 'dict'>
19:26:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜一闪",
    "comments": []
  }
]
19:26:52 完整请求
19:26:52 请求结束
19:26:52 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:26:52 path and query /api/weibo/update {} {"id":"7","content":"肚兜"}
19:26:53 kwargs,  {'id': 7} <class 'dict'>
19:26:53 debug 5
19:26:53 kwargs,  {'weibo_id': 7} <class 'dict'>
19:26:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "content": "肚兜",
  "comments": []
}
19:27:10 完整请求
19:27:10 请求结束
19:27:10 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:27:10 path and query /static {'file': 'weibo.js'} 
19:27:10 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '#weibo-' + weibo.id
                var weiboCell = e(selector)
                var titleSpan = weiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:33:54 完整请求
19:33:54 请求结束
19:33:54 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:33:54 path and query /weibo/index {} 
19:33:54 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:33:54 完整请求
19:33:54 完整请求
19:33:54 请求结束
19:33:54 请求结束
19:33:54 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:33:54 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:33:54 path and query /static {'file': 'gua.js'} 
19:33:54 path and query /static {'file': 'weibo.js'} 
19:33:54 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}

{
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = 'data-id=' + weibo.id
                var weiboCell = e(selector)
                log('weiboCell', weiboCell)
                var titleSpan = weiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:33:54 完整请求
19:33:54 请求结束
19:33:54 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:33:54 path and query /api/weibo/all {} 
19:33:54 kwargs,  {'weibo_id': 2} <class 'dict'>
19:33:54 完整请求
19:33:54 请求结束
19:33:54 kwargs,  {'weibo_id': 3} <class 'dict'>
19:33:54 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:33:54 kwargs,  {'weibo_id': 4} <class 'dict'>
19:33:54 kwargs,  {'weibo_id': 5} <class 'dict'>
19:33:54 path and query /static {'file': 'weibo.js'} 
19:33:54 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = 'data-id=' + weibo.id
                var weiboCell = e(selector)
                log('weiboCell', weiboCell)
                var titleSpan = weiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:33:54 kwargs,  {'weibo_id': 6} <class 'dict'>
19:33:54 kwargs,  {'weibo_id': 7} <class 'dict'>
19:33:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜",
    "comments": []
  }
]
19:33:57 完整请求
19:33:57 请求结束
19:33:57 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:33:57 path and query /api/weibo/all {} 
19:33:57 kwargs,  {'weibo_id': 2} <class 'dict'>
19:33:57 kwargs,  {'weibo_id': 3} <class 'dict'>
19:33:57 kwargs,  {'weibo_id': 4} <class 'dict'>
19:33:57 kwargs,  {'weibo_id': 5} <class 'dict'>
19:33:57 kwargs,  {'weibo_id': 6} <class 'dict'>
19:33:57 kwargs,  {'weibo_id': 7} <class 'dict'>
19:33:57 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜",
    "comments": []
  }
]
19:34:01 完整请求
19:34:01 请求结束
19:34:01 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:34:01 path and query /api/weibo/update {} {"id":"7","content":"肚兜的"}
19:34:01 kwargs,  {'id': 7} <class 'dict'>
19:34:01 debug 5
19:34:01 kwargs,  {'weibo_id': 7} <class 'dict'>
19:34:01 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "content": "肚兜的",
  "comments": []
}
19:35:28 完整请求
19:35:28 请求结束
19:35:28 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:35:28 path and query /weibo/index {} 
19:35:28 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:35:28 完整请求
19:35:28 完整请求
19:35:28 请求结束
19:35:28 请求结束
19:35:28 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:35:28 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:35:28 path and query /static {'file': 'weibo.js'} 
19:35:28 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = 'data-id=' + weibo.id
                var weiboCell = e([selector])
                log('weiboCell', weiboCell)
                var titleSpan = weiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:35:28 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}

19:35:28 完整请求
19:35:28 请求结束
19:35:28 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:35:28 path and query /api/weibo/all {} 
19:35:28 kwargs,  {'weibo_id': 2} <class 'dict'>
19:35:28 完整请求
19:35:28 请求结束
19:35:28 kwargs,  {'weibo_id': 3} <class 'dict'>
19:35:28 kwargs,  {'weibo_id': 4} <class 'dict'>
19:35:28 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:35:28 path and query /static {'file': 'weibo.js'} 
19:35:28 kwargs,  {'weibo_id': 5} <class 'dict'>
19:35:29 kwargs,  {'weibo_id': 6} <class 'dict'>
19:35:29 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = 'data-id=' + weibo.id
                var weiboCell = e([selector])
                log('weiboCell', weiboCell)
                var titleSpan = weiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:35:29 kwargs,  {'weibo_id': 7} <class 'dict'>
19:35:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜的",
    "comments": []
  }
]
19:35:33 完整请求
19:35:33 请求结束
19:35:33 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:35:33 path and query /api/weibo/all {} 
19:35:34 kwargs,  {'weibo_id': 2} <class 'dict'>
19:35:34 kwargs,  {'weibo_id': 3} <class 'dict'>
19:35:34 kwargs,  {'weibo_id': 4} <class 'dict'>
19:35:34 kwargs,  {'weibo_id': 5} <class 'dict'>
19:35:34 kwargs,  {'weibo_id': 6} <class 'dict'>
19:35:34 kwargs,  {'weibo_id': 7} <class 'dict'>
19:35:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜的",
    "comments": []
  }
]
19:35:39 完整请求
19:35:39 请求结束
19:35:39 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:35:39 path and query /api/weibo/update {} {"id":"7","content":"肚兜等到"}
19:35:39 kwargs,  {'id': 7} <class 'dict'>
19:35:39 debug 5
19:35:39 kwargs,  {'weibo_id': 7} <class 'dict'>
19:35:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "content": "肚兜等到",
  "comments": []
}
19:36:14 完整请求
19:36:14 请求结束
19:36:14 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:36:14 path and query /weibo/index {} 
19:36:14 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:36:14 完整请求
19:36:14 完整请求
19:36:14 请求结束
19:36:14 请求结束
19:36:14 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:36:14 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:36:14 path and query /static {'file': 'weibo.js'} 
19:36:14 path and query /static {'file': 'gua.js'} 
19:36:14 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}

19:36:14 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id=' + weibo.id + ']'
                var weiboCell = e(selector)
                log('weiboCell', weiboCell)
                var titleSpan = weiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:36:14 完整请求
19:36:14 请求结束
19:36:14 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:36:14 path and query /api/weibo/all {} 
19:36:14 完整请求
19:36:14 请求结束
19:36:14 kwargs,  {'weibo_id': 2} <class 'dict'>
19:36:14 kwargs,  {'weibo_id': 3} <class 'dict'>
19:36:14 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:36:14 path and query /static {'file': 'weibo.js'} 
19:36:14 kwargs,  {'weibo_id': 4} <class 'dict'>
19:36:14 kwargs,  {'weibo_id': 5} <class 'dict'>
19:36:14 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id=' + weibo.id + ']'
                var weiboCell = e(selector)
                log('weiboCell', weiboCell)
                var titleSpan = weiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:36:14 kwargs,  {'weibo_id': 6} <class 'dict'>
19:36:15 kwargs,  {'weibo_id': 7} <class 'dict'>
19:36:15 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜等到",
    "comments": []
  }
]
19:36:16 完整请求
19:36:16 请求结束
19:36:16 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:36:16 path and query /api/weibo/all {} 
19:36:16 kwargs,  {'weibo_id': 2} <class 'dict'>
19:36:16 kwargs,  {'weibo_id': 3} <class 'dict'>
19:36:16 kwargs,  {'weibo_id': 4} <class 'dict'>
19:36:16 kwargs,  {'weibo_id': 5} <class 'dict'>
19:36:16 kwargs,  {'weibo_id': 6} <class 'dict'>
19:36:16 kwargs,  {'weibo_id': 7} <class 'dict'>
19:36:16 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜等到",
    "comments": []
  }
]
19:36:21 完整请求
19:36:21 请求结束
19:36:21 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:36:21 path and query /api/weibo/update {} {"id":"7","content":"肚兜"}
19:36:21 kwargs,  {'id': 7} <class 'dict'>
19:36:21 debug 5
19:36:21 kwargs,  {'weibo_id': 7} <class 'dict'>
19:36:21 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "content": "肚兜",
  "comments": []
}
19:40:37 完整请求
19:40:37 请求结束
19:40:37 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:40:37 path and query /weibo/index {} 
19:40:37 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:40:37 完整请求
19:40:37 完整请求
19:40:37 请求结束
19:40:37 请求结束
19:40:37 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:40:37 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:40:37 path and query /static {'file': 'gua.js'} 
19:40:37 path and query /static {'file': 'weibo.js'} 
19:40:37 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)
                log('weiboCell', weiboCell)
                var titleSpan = weiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:40:37 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}

19:40:37 完整请求
19:40:37 请求结束
19:40:37 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:40:37 path and query /api/weibo/all {} 
19:40:37 完整请求
19:40:37 请求结束
19:40:37 kwargs,  {'weibo_id': 2} <class 'dict'>
19:40:37 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:40:37 kwargs,  {'weibo_id': 3} <class 'dict'>
19:40:37 path and query /static {'file': 'weibo.js'} 
19:40:37 kwargs,  {'weibo_id': 4} <class 'dict'>
19:40:37 kwargs,  {'weibo_id': 5} <class 'dict'>
19:40:37 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id
            apiWeiboAll(function(r) {

            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)
                log('weiboCell', weiboCell)
                var titleSpan = weiboCell.querySelector('.weibo-content')
                titleSpan.innerHTML = weibo.title
//                weiboCell.remove()
            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:40:37 kwargs,  {'weibo_id': 6} <class 'dict'>
19:40:37 kwargs,  {'weibo_id': 7} <class 'dict'>
19:40:37 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜",
    "comments": []
  }
]
19:40:39 完整请求
19:40:39 请求结束
19:40:39 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:40:39 path and query /api/weibo/all {} 
19:40:39 kwargs,  {'weibo_id': 2} <class 'dict'>
19:40:39 kwargs,  {'weibo_id': 3} <class 'dict'>
19:40:39 kwargs,  {'weibo_id': 4} <class 'dict'>
19:40:39 kwargs,  {'weibo_id': 5} <class 'dict'>
19:40:39 kwargs,  {'weibo_id': 6} <class 'dict'>
19:40:39 kwargs,  {'weibo_id': 7} <class 'dict'>
19:40:39 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜",
    "comments": []
  }
]
19:40:42 完整请求
19:40:42 请求结束
19:40:42 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:40:42 path and query /api/weibo/update {} {"id":"7","content":"肚兜sd "}
19:40:42 kwargs,  {'id': 7} <class 'dict'>
19:40:42 debug 5
19:40:42 kwargs,  {'weibo_id': 7} <class 'dict'>
19:40:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "content": "肚兜sd ",
  "comments": []
}
19:43:19 完整请求
19:43:19 请求结束
19:43:19 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:43:19 path and query /api/weibo/all {} 
19:43:19 kwargs,  {'weibo_id': 2} <class 'dict'>
19:43:19 kwargs,  {'weibo_id': 3} <class 'dict'>
19:43:19 kwargs,  {'weibo_id': 4} <class 'dict'>
19:43:19 kwargs,  {'weibo_id': 5} <class 'dict'>
19:43:19 kwargs,  {'weibo_id': 6} <class 'dict'>
19:43:19 kwargs,  {'weibo_id': 7} <class 'dict'>
19:43:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜sd ",
    "comments": []
  }
]
19:46:34 完整请求
19:46:34 请求结束
19:46:34 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:46:34 path and query /weibo/index {} 
19:46:34 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: blue;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:46:34 完整请求
19:46:34 完整请求
19:46:34 请求结束
19:46:34 请求结束
19:46:34 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:46:34 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:46:35 path and query /static {'file': 'weibo.js'} 
19:46:35 path and query /static {'file': 'gua.js'} 
19:46:35 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:46:35 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}

19:46:35 完整请求
19:46:35 请求结束
19:46:35 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:46:35 path and query /api/weibo/all {} 
19:46:35 kwargs,  {'weibo_id': 2} <class 'dict'>
19:46:35 完整请求
19:46:35 请求结束
19:46:35 kwargs,  {'weibo_id': 3} <class 'dict'>
19:46:35 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:46:35 kwargs,  {'weibo_id': 4} <class 'dict'>
19:46:35 path and query /static {'file': 'weibo.js'} 
19:46:35 kwargs,  {'weibo_id': 5} <class 'dict'>
19:46:35 kwargs,  {'weibo_id': 6} <class 'dict'>
19:46:35 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}

var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:46:35 kwargs,  {'weibo_id': 7} <class 'dict'>
19:46:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜sd ",
    "comments": []
  }
]
19:46:36 完整请求
19:46:37 请求结束
19:46:37 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:46:37 path and query /api/weibo/all {} 
19:46:37 kwargs,  {'weibo_id': 2} <class 'dict'>
19:46:37 kwargs,  {'weibo_id': 3} <class 'dict'>
19:46:37 kwargs,  {'weibo_id': 4} <class 'dict'>
19:46:37 kwargs,  {'weibo_id': 5} <class 'dict'>
19:46:37 kwargs,  {'weibo_id': 6} <class 'dict'>
19:46:37 kwargs,  {'weibo_id': 7} <class 'dict'>
19:46:37 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "肚兜sd ",
    "comments": []
  }
]
19:46:45 完整请求
19:46:45 请求结束
19:46:45 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:46:45 path and query /api/weibo/update {} {"id":"7","content":"测试陈功!"}
19:46:45 kwargs,  {'id': 7} <class 'dict'>
19:46:45 debug 5
19:46:45 kwargs,  {'weibo_id': 7} <class 'dict'>
19:46:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 7,
  "content": "测试陈功!",
  "comments": []
}
19:53:18 完整请求
19:53:18 请求结束
19:53:18 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:53:18 path and query /weibo/index {} 
19:53:18 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:53:18 完整请求
19:53:18 请求结束
19:53:18 请求结束
19:53:18 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:53:18 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:53:18 path and query /static {'file': 'weibo.js'} 
19:53:18 path and query /static {'file': 'gua.js'} 
19:53:18 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}


var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:53:18 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}

19:53:18 完整请求
19:53:18 请求结束
19:53:18 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:53:18 path and query /api/weibo/all {} 
19:53:18 完整请求
19:53:18 kwargs,  {'weibo_id': 2} <class 'dict'>
19:53:18 请求结束
19:53:18 kwargs,  {'weibo_id': 3} <class 'dict'>
19:53:19 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:53:19 kwargs,  {'weibo_id': 4} <class 'dict'>
19:53:19 path and query /static {'file': 'weibo.js'} 
19:53:19 kwargs,  {'weibo_id': 5} <class 'dict'>
19:53:19 kwargs,  {'weibo_id': 6} <class 'dict'>
19:53:19 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}


var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:53:19 kwargs,  {'weibo_id': 7} <class 'dict'>
19:53:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "你好",
    "user_id": 1,
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "多加几个",
    "comments": []
  },
  {
    "id": 5,
    "content": "然后继续",
    "comments": []
  },
  {
    "id": 6,
    "content": "围绕",
    "comments": []
  },
  {
    "id": 7,
    "content": "测试陈功!",
    "comments": []
  }
]
19:57:08 完整请求
19:57:09 请求结束
19:57:09 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:57:09 path and query /api/weibo/delete {'id': '3'} 
19:57:09 kwargs,  {'weibo_id': 3} <class 'dict'>
19:57:09 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "content": "测试",
  "comments": [
    {
      "id": 6,
      "content": "123",
      "weibo_id": 3,
      "user_id": 1
    }
  ]
}
19:57:13 完整请求
19:57:13 完整请求
19:57:13 请求结束
19:57:13 请求结束
19:57:13 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:57:13 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:57:13 path and query /api/weibo/add {} {"content":"斯蒂芬"}
19:57:13 path and query /api/weibo/add {} {"content":"斯蒂芬"}
19:57:13 kwargs,  {'weibo_id': 8} <class 'dict'>
19:57:13 kwargs,  {'weibo_id': 8} <class 'dict'>
19:57:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "content": "斯蒂芬",
  "comments": []
}
19:57:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 8,
  "content": "斯蒂芬",
  "comments": []
}
19:59:51 完整请求
19:59:51 请求结束
19:59:51 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:59:51 path and query /weibo/index {} 
19:59:51 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
19:59:51 完整请求
19:59:51 完整请求
19:59:51 请求结束
19:59:51 请求结束
19:59:51 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:59:51 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:59:51 path and query /static {'file': 'weibo.js'} 
19:59:51 path and query /static {'file': 'gua.js'} 
19:59:51 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



19:59:51 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('#comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}


var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:59:52 完整请求
19:59:52 请求结束
19:59:52 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:59:52 path and query /static {'file': 'weibo.js'} 
19:59:52 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('#comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}


var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

19:59:57 完整请求
19:59:57 请求结束
19:59:57 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:59:57 path and query /api/weibo/add {} {"content":"测试1"}
19:59:57 kwargs,  {'weibo_id': 1} <class 'dict'>
19:59:57 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "测试1",
  "comments": [
    {
      "id": 1,
      "content": "楼主说得对",
      "weibo_id": 1,
      "user_id": 2
    },
    {
      "id": 2,
      "content": "lbvu is right",
      "weibo_id": 1,
      "user_id": 1
    }
  ]
}
19:59:59 完整请求
19:59:59 请求结束
19:59:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
19:59:59 path and query /api/weibo/add {} {"content":"测试2"}
19:59:59 kwargs,  {'weibo_id': 2} <class 'dict'>
19:59:59 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "content": "测试2",
  "comments": [
    {
      "id": 3,
      "content": "hello",
      "weibo_id": 2,
      "user_id": 1
    },
    {
      "id": 4,
      "content": "123",
      "weibo_id": 2,
      "user_id": 1
    },
    {
      "id": 5,
      "content": "asdf",
      "weibo_id": 2,
      "user_id": 1
    },
    {
      "id": 7,
      "content": "说得好",
      "weibo_id": 2,
      "user_id": 2
    },
    {
      "id": 8,
      "content": "说得好",
      "weibo_id": 2,
      "user_id": 2
    }
  ]
}
20:00:01 完整请求
20:00:01 请求结束
20:00:01 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:00:01 path and query /api/weibo/add {} {"content":"测试3"}
20:00:01 kwargs,  {'weibo_id': 3} <class 'dict'>
20:00:01 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 3,
  "content": "测试3",
  "comments": [
    {
      "id": 6,
      "content": "123",
      "weibo_id": 3,
      "user_id": 1
    }
  ]
}
20:00:02 完整请求
20:00:02 请求结束
20:00:02 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:00:02 path and query /api/weibo/add {} {"content":"测试4"}
20:00:02 kwargs,  {'weibo_id': 4} <class 'dict'>
20:00:02 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 4,
  "content": "测试4",
  "comments": []
}
20:00:04 完整请求
20:00:04 请求结束
20:00:04 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:00:04 path and query /api/weibo/add {} {"content":"测试5"}
20:00:04 kwargs,  {'weibo_id': 5} <class 'dict'>
20:00:04 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 5,
  "content": "测试5",
  "comments": []
}
20:07:11 完整请求
20:07:11 请求结束
20:07:11 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:07:11 path and query /weibo/index {} 
20:07:11 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:07:11 完整请求
20:07:11 完整请求
20:07:11 请求结束
20:07:11 请求结束
20:07:11 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:07:11 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:07:11 path and query /static {'file': 'weibo.js'} 
20:07:11 path and query /static {'file': 'gua.js'} 
20:07:11 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



20:07:11 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('#comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            //var selector = '[data-id="' + weibo.id + '"]'
            //var weiboCell = e(selector)

            //var comment = weiboCell.children[3]

        })
    })
}


var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:07:11 完整请求
20:07:11 请求结束
20:07:11 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:07:11 path and query /static {'file': 'weibo.js'} 
20:07:11 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('#comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            //var selector = '[data-id="' + weibo.id + '"]'
            //var weiboCell = e(selector)

            //var comment = weiboCell.children[3]

        })
    })
}


var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()
   bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:07:58 完整请求
20:07:58 请求结束
20:07:58 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:07:58 path and query /weibo/index {} 
20:07:58 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:07:58 完整请求
20:07:58 完整请求
20:07:58 请求结束
20:07:58 请求结束
20:07:58 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:07:58 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:07:58 path and query /static {'file': 'weibo.js'} 
20:07:58 path and query /static {'file': 'gua.js'} 
20:07:58 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('#comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            //var selector = '[data-id="' + weibo.id + '"]'
            //var weiboCell = e(selector)

            //var comment = weiboCell.children[3]

        })
    })
}


var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()

}

var __main = function() {
    bindEvents()
    loadweibos()
    bindEventCommentAdd()
}

__main()

20:07:58 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



20:07:58 完整请求
20:07:58 请求结束
20:07:58 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:07:58 path and query /api/weibo/all {} 
20:07:58 kwargs,  {'weibo_id': 1} <class 'dict'>
20:07:58 完整请求
20:07:58 请求结束
20:07:58 kwargs,  {'weibo_id': 2} <class 'dict'>
20:07:58 kwargs,  {'weibo_id': 3} <class 'dict'>
20:07:58 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:07:58 path and query /static {'file': 'weibo.js'} 
20:07:58 kwargs,  {'weibo_id': 4} <class 'dict'>
20:07:58 kwargs,  {'weibo_id': 5} <class 'dict'>
20:07:58 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('#comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            //var selector = '[data-id="' + weibo.id + '"]'
            //var weiboCell = e(selector)

            //var comment = weiboCell.children[3]

        })
    })
}


var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()

}

var __main = function() {
    bindEvents()
    loadweibos()
    bindEventCommentAdd()
}

__main()

20:07:58 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": []
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": []
  }
]
20:08:05 完整请求
20:08:05 请求结束
20:08:05 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:08:05 path and query /weibo/index {} 
20:08:05 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:08:05 完整请求
20:08:05 请求结束
20:08:05 请求结束
20:08:05 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:08:05 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:08:05 path and query /static {'file': 'weibo.js'} 
20:08:05 path and query /static {'file': 'gua.js'} 
20:08:05 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('#comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            //var selector = '[data-id="' + weibo.id + '"]'
            //var weiboCell = e(selector)

            //var comment = weiboCell.children[3]

        })
    })
}


var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()

}

var __main = function() {
    bindEvents()
    loadweibos()
    bindEventCommentAdd()
}

__main()

20:08:05 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



20:08:05 完整请求
20:08:05 请求结束
20:08:05 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:08:05 path and query /api/weibo/all {} 
20:08:05 完整请求
20:08:05 请求结束
20:08:05 kwargs,  {'weibo_id': 1} <class 'dict'>
20:08:05 kwargs,  {'weibo_id': 2} <class 'dict'>
20:08:05 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:08:05 path and query /static {'file': 'weibo.js'} 
20:08:05 kwargs,  {'weibo_id': 3} <class 'dict'>
20:08:05 kwargs,  {'weibo_id': 4} <class 'dict'>
20:08:05 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var b = e('#comment-add')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#comment-content')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiCommentAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            //var selector = '[data-id="' + weibo.id + '"]'
            //var weiboCell = e(selector)

            //var comment = weiboCell.children[3]

        })
    })
}


var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()

}

var __main = function() {
    bindEvents()
    loadweibos()
    bindEventCommentAdd()
}

__main()

20:08:05 kwargs,  {'weibo_id': 5} <class 'dict'>
20:08:05 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": []
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": []
  }
]
20:13:42 完整请求
20:13:42 请求结束
20:13:42 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:13:42 path and query /weibo/index {} 
20:13:42 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:13:42 完整请求
20:13:42 完整请求
20:13:42 请求结束
20:13:42 请求结束
20:13:42 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:13:42 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:13:42 path and query /static {'file': 'gua.js'} 
20:13:42 path and query /static {'file': 'weibo.js'} 
20:13:43 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



20:13:43 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var weibo = JSON.parse(r)
                //var selector = '[data-id="' + weibo.id + '"]'
                //var weiboCell = e(selector)

                //var comment = weiboCell.children[3]
            })
        }
    })
}


var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()

}

var __main = function() {
    bindEvents()
    loadweibos()
    bindEventCommentAdd()
}

__main()

20:13:43 完整请求
20:13:43 请求结束
20:13:43 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:13:43 path and query /api/weibo/all {} 
20:13:43 完整请求
20:13:43 kwargs,  {'weibo_id': 1} <class 'dict'>
20:13:43 kwargs,  {'weibo_id': 2} <class 'dict'>
20:13:43 请求结束
20:13:43 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:13:43 kwargs,  {'weibo_id': 3} <class 'dict'>
20:13:43 path and query /static {'file': 'weibo.js'} 
20:13:43 kwargs,  {'weibo_id': 4} <class 'dict'>
20:13:43 kwargs,  {'weibo_id': 5} <class 'dict'>
20:13:43 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var weibo = JSON.parse(r)
                //var selector = '[data-id="' + weibo.id + '"]'
                //var weiboCell = e(selector)

                //var comment = weiboCell.children[3]
            })
        }
    })
}


var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()

}

var __main = function() {
    bindEvents()
    loadweibos()
    bindEventCommentAdd()
}

__main()

20:13:43 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": []
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": []
  }
]
20:13:49 完整请求
20:13:49 请求结束
20:13:49 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:13:49 path and query /api/comment/add {} {"content":""}
20:13:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 9,
  "content": "",
  "weibo_id": -1
}
20:13:55 完整请求
20:13:55 请求结束
20:13:55 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:13:55 path and query /api/comment/add {} {"content":""}
20:13:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 10,
  "content": "",
  "weibo_id": -1
}
20:14:08 完整请求
20:14:08 请求结束
20:14:08 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:14:08 path and query /api/comment/add {} {"content":"添加"}
20:14:08 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 11,
  "content": "添加",
  "weibo_id": -1
}
20:16:56 完整请求
20:16:56 请求结束
20:16:56 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:16:56 path and query /weibo/index {} 
20:16:56 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:16:56 完整请求
20:16:56 完整请求
20:16:56 请求结束
20:16:56 请求结束
20:16:56 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:16:56 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:16:56 path and query /static {'file': 'weibo.js'} 
20:16:56 path and query /static {'file': 'gua.js'} 
20:16:56 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var weibo = JSON.parse(r)
                //var selector = '[data-id="' + weibo.id + '"]'
                //var weiboCell = e(selector)

                //var comment = weiboCell.children[3]
            })
        }
    })
}


var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()

}

var __main = function() {
    bindEvents()
    loadweibos()
    bindEventCommentAdd()
}

__main()

20:16:56 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



20:16:56 完整请求
20:16:56 请求结束
20:16:56 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:16:56 path and query /api/weibo/all {} 
20:16:56 完整请求
20:16:56 请求结束
20:16:56 kwargs,  {'weibo_id': 1} <class 'dict'>
20:16:56 kwargs,  {'weibo_id': 2} <class 'dict'>
20:16:56 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:16:56 path and query /static {'file': 'weibo.js'} 
20:16:56 kwargs,  {'weibo_id': 3} <class 'dict'>
20:16:56 kwargs,  {'weibo_id': 4} <class 'dict'>
20:16:56 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var weibo = JSON.parse(r)
                //var selector = '[data-id="' + weibo.id + '"]'
                //var weiboCell = e(selector)

                //var comment = weiboCell.children[3]
            })
        }
    })
}


var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()

}

var __main = function() {
    bindEvents()
    loadweibos()
    bindEventCommentAdd()
}

__main()

20:16:56 kwargs,  {'weibo_id': 5} <class 'dict'>
20:16:56 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": []
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": []
  }
]
20:17:03 完整请求
20:17:03 请求结束
20:17:03 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:17:03 path and query /api/comment/add {} {"content":"频率滚","weibo_id":"5"}
20:17:03 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 12,
  "content": "频率滚",
  "weibo_id": 5
}
20:17:22 完整请求
20:17:22 请求结束
20:17:22 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:17:22 path and query /weibo/index {} 
20:17:22 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:17:22 完整请求
20:17:22 完整请求
20:17:22 请求结束
20:17:22 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:17:22 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:17:22 path and query /static {'file': 'weibo.js'} 
20:17:22 path and query /static {'file': 'gua.js'} 
20:17:22 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var weibo = JSON.parse(r)
                //var selector = '[data-id="' + weibo.id + '"]'
                //var weiboCell = e(selector)

                //var comment = weiboCell.children[3]
            })
        }
    })
}


var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()

}

var __main = function() {
    bindEvents()
    loadweibos()
    bindEventCommentAdd()
}

__main()

20:17:22 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



20:17:22 完整请求
20:17:22 请求结束
20:17:22 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:17:22 path and query /api/weibo/all {} 
20:17:22 kwargs,  {'weibo_id': 1} <class 'dict'>
20:17:22 完整请求
20:17:22 请求结束
20:17:22 kwargs,  {'weibo_id': 2} <class 'dict'>
20:17:22 kwargs,  {'weibo_id': 3} <class 'dict'>
20:17:22 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:17:22 path and query /static {'file': 'weibo.js'} 
20:17:22 kwargs,  {'weibo_id': 4} <class 'dict'>
20:17:23 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var weibo = JSON.parse(r)
                //var selector = '[data-id="' + weibo.id + '"]'
                //var weiboCell = e(selector)

                //var comment = weiboCell.children[3]
            })
        }
    })
}


var bindEvents = function() {
   bindEventweiboAdd()
   bindEventweiboDelete()
   bindEventweiboEdit()
   bindEventweiboUpdate()

}

var __main = function() {
    bindEvents()
    loadweibos()
    bindEventCommentAdd()
}

__main()

20:17:23 kwargs,  {'weibo_id': 5} <class 'dict'>
20:17:23 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": []
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      }
    ]
  }
]
20:22:06 完整请求
20:22:06 请求结束
20:22:06 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:22:06 path and query /weibo/index {} 
20:22:06 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:22:06 完整请求
20:22:06 完整请求
20:22:06 请求结束
20:22:06 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:22:06 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:22:06 path and query /static {'file': 'weibo.js'} 
20:22:06 path and query /static {'file': 'gua.js'} 
20:22:06 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comment = weibo.comment
    var t = `
        <div class="comment-list">
                ${comments}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin, t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var comment = weiboCell.children[3]

                insertCommentAdd(comment, weibo)

            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:22:06 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



20:22:16 完整请求
20:22:16 请求结束
20:22:27 完整请求
20:22:27 请求结束
20:22:51 完整请求
20:22:51 请求结束
20:22:51 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:22:51 path and query /weibo/index {} 
20:22:51 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:22:51 完整请求
20:22:51 完整请求
20:22:51 请求结束
20:22:51 请求结束
20:22:51 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:22:51 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:22:51 path and query /static {'file': 'gua.js'} 
20:22:51 path and query /static {'file': 'weibo.js'} 
20:22:51 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comment = weibo.comment
    var t = `
        <div class="comment-list">
                ${comments}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var comment = weiboCell.children[3]

                insertCommentAdd(comment, weibo)

            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:22:51 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



20:22:51 完整请求
20:22:51 请求结束
20:22:51 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:22:51 path and query /api/weibo/all {} 
20:22:51 完整请求
20:22:51 请求结束
20:22:51 kwargs,  {'weibo_id': 1} <class 'dict'>
20:22:51 kwargs,  {'weibo_id': 2} <class 'dict'>
20:22:51 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:22:51 path and query /static {'file': 'weibo.js'} 
20:22:51 kwargs,  {'weibo_id': 3} <class 'dict'>
20:22:51 kwargs,  {'weibo_id': 4} <class 'dict'>
20:22:51 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comment = weibo.comment
    var t = `
        <div class="comment-list">
                ${comments}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var comment = weiboCell.children[3]

                insertCommentAdd(comment, weibo)

            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:22:51 kwargs,  {'weibo_id': 5} <class 'dict'>
20:22:51 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": []
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      }
    ]
  }
]
20:22:58 完整请求
20:22:58 请求结束
20:22:58 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:22:58 path and query /api/comment/add {} {"content":"","weibo_id":"5"}
20:22:58 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 13,
  "content": "",
  "weibo_id": 5
}
20:23:03 完整请求
20:23:03 请求结束
20:23:03 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:23:03 path and query /api/comment/add {} {"content":"速度","weibo_id":"5"}
20:23:03 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 14,
  "content": "速度",
  "weibo_id": 5
}
20:24:26 完整请求
20:24:26 请求结束
20:24:26 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:24:26 path and query /weibo/index {} 
20:24:26 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:24:26 完整请求
20:24:26 完整请求
20:24:26 请求结束
20:24:26 请求结束
20:24:26 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:24:26 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:24:27 path and query /static {'file': 'gua.js'} 
20:24:27 path and query /static {'file': 'weibo.js'} 
20:24:27 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



20:24:27 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comment = weibo.comment
    var t = `
        <div class="comment-list">
                ${comments}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)

                var comment = weiboCell.children[3]

                insertCommentAdd(comment, weibo)

            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:24:27 完整请求
20:24:27 请求结束
20:24:27 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:24:27 path and query /api/weibo/all {} 
20:24:27 完整请求
20:24:27 请求结束
20:24:27 kwargs,  {'weibo_id': 1} <class 'dict'>
20:24:27 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:24:27 path and query /static {'file': 'weibo.js'} 
20:24:27 kwargs,  {'weibo_id': 2} <class 'dict'>
20:24:27 kwargs,  {'weibo_id': 3} <class 'dict'>
20:24:27 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comment = weibo.comment
    var t = `
        <div class="comment-list">
                ${comments}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)

                var comment = weiboCell.children[3]

                insertCommentAdd(comment, weibo)

            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:24:27 kwargs,  {'weibo_id': 4} <class 'dict'>
20:24:27 kwargs,  {'weibo_id': 5} <class 'dict'>
20:24:27 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": []
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      },
      {
        "id": 13,
        "content": "",
        "weibo_id": 5
      },
      {
        "id": 14,
        "content": "速度",
        "weibo_id": 5
      }
    ]
  }
]
20:24:31 完整请求
20:24:31 请求结束
20:24:31 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:24:31 path and query /api/comment/add {} {"content":"等到","weibo_id":"4"}
20:24:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 15,
  "content": "等到",
  "weibo_id": 4
}
20:25:10 完整请求
20:25:10 请求结束
20:25:10 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:25:10 path and query /weibo/index {} 
20:25:10 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:25:10 完整请求
20:25:10 完整请求
20:25:10 请求结束
20:25:10 请求结束
20:25:10 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:25:10 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:25:10 path and query /static {'file': 'weibo.js'} 
20:25:10 path and query /static {'file': 'gua.js'} 
20:25:10 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



20:25:10 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comment = weibo.comment
    var t = `
        <div class="comment-list">
                ${comments}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)

                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:25:11 完整请求
20:25:11 请求结束
20:25:11 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:25:11 path and query /api/weibo/all {} 
20:25:11 完整请求
20:25:11 请求结束
20:25:11 kwargs,  {'weibo_id': 1} <class 'dict'>
20:25:11 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:25:11 kwargs,  {'weibo_id': 2} <class 'dict'>
20:25:11 path and query /static {'file': 'weibo.js'} 
20:25:11 kwargs,  {'weibo_id': 3} <class 'dict'>
20:25:11 kwargs,  {'weibo_id': 4} <class 'dict'>
20:25:11 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comment = weibo.comment
    var t = `
        <div class="comment-list">
                ${comments}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)

                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:25:11 kwargs,  {'weibo_id': 5} <class 'dict'>
20:25:11 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": [
      {
        "id": 15,
        "content": "等到",
        "weibo_id": 4
      }
    ]
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      },
      {
        "id": 13,
        "content": "",
        "weibo_id": 5
      },
      {
        "id": 14,
        "content": "速度",
        "weibo_id": 5
      }
    ]
  }
]
20:25:14 完整请求
20:25:14 请求结束
20:25:14 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:25:14 path and query /api/comment/add {} {"content":"的","weibo_id":"4"}
20:25:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 16,
  "content": "的",
  "weibo_id": 4
}
20:25:26 完整请求
20:25:26 请求结束
20:26:48 完整请求
20:26:48 请求结束
20:26:48 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:26:48 path and query /weibo/index {} 
20:26:48 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:26:49 完整请求
20:26:49 完整请求
20:26:49 请求结束
20:26:49 请求结束
20:26:49 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:26:49 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:26:49 path and query /static {'file': 'gua.js'} 
20:26:49 path and query /static {'file': 'weibo.js'} 
20:26:49 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.comment
    var t = `
        <div class="comment-list">
                ${comments}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)

                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:26:49 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



20:26:49 完整请求
20:26:49 请求结束
20:26:49 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:26:49 path and query /api/weibo/all {} 
20:26:49 kwargs,  {'weibo_id': 1} <class 'dict'>
20:26:49 完整请求
20:26:49 请求结束
20:26:49 kwargs,  {'weibo_id': 2} <class 'dict'>
20:26:49 kwargs,  {'weibo_id': 3} <class 'dict'>
20:26:49 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:26:49 path and query /static {'file': 'weibo.js'} 
20:26:49 kwargs,  {'weibo_id': 4} <class 'dict'>
20:26:49 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.comment
    var t = `
        <div class="comment-list">
                ${comments}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)

                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:26:49 kwargs,  {'weibo_id': 5} <class 'dict'>
20:26:49 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": [
      {
        "id": 15,
        "content": "等到",
        "weibo_id": 4
      },
      {
        "id": 16,
        "content": "的",
        "weibo_id": 4
      }
    ]
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      },
      {
        "id": 13,
        "content": "",
        "weibo_id": 5
      },
      {
        "id": 14,
        "content": "速度",
        "weibo_id": 5
      }
    ]
  }
]
20:26:53 完整请求
20:26:53 请求结束
20:26:53 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:26:53 path and query /api/comment/add {} {"content":"待得懂","weibo_id":"4"}
20:26:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 17,
  "content": "待得懂",
  "weibo_id": 4
}
20:31:11 完整请求
20:31:11 请求结束
20:31:11 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:31:11 path and query /weibo/index {} 
20:31:11 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:31:11 完整请求
20:31:11 完整请求
20:31:11 请求结束
20:31:11 请求结束
20:31:11 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:31:11 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:31:11 path and query /static {'file': 'weibo.js'} 
20:31:11 path and query /static {'file': 'gua.js'} 
20:31:11 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



20:31:11 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class="comment-list">
                ${comments}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)

                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:31:12 完整请求
20:31:12 请求结束
20:31:12 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:31:12 path and query /api/weibo/all {} 
20:31:12 完整请求
20:31:12 请求结束
20:31:12 kwargs,  {'weibo_id': 1} <class 'dict'>
20:31:12 kwargs,  {'weibo_id': 2} <class 'dict'>
20:31:12 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:31:12 path and query /static {'file': 'weibo.js'} 
20:31:12 kwargs,  {'weibo_id': 3} <class 'dict'>
20:31:12 kwargs,  {'weibo_id': 4} <class 'dict'>
20:31:12 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class="comment-list">
                ${comments}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)

                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:31:12 kwargs,  {'weibo_id': 5} <class 'dict'>
20:31:12 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": [
      {
        "id": 15,
        "content": "等到",
        "weibo_id": 4
      },
      {
        "id": 16,
        "content": "的",
        "weibo_id": 4
      },
      {
        "id": 17,
        "content": "待得懂",
        "weibo_id": 4
      }
    ]
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      },
      {
        "id": 13,
        "content": "",
        "weibo_id": 5
      },
      {
        "id": 14,
        "content": "速度",
        "weibo_id": 5
      }
    ]
  }
]
20:31:17 完整请求
20:31:17 请求结束
20:31:17 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:31:17 path and query /api/comment/add {} {"content":"2321","weibo_id":"3"}
20:31:17 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 18,
  "content": "2321",
  "weibo_id": 3
}
20:31:26 完整请求
20:31:26 请求结束
20:32:20 完整请求
20:32:20 请求结束
20:32:20 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:32:20 path and query /weibo/index {} 
20:32:20 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:32:20 完整请求
20:32:20 完整请求
20:32:20 请求结束
20:32:20 请求结束
20:32:20 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:32:20 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:32:20 path and query /static {'file': 'gua.js'} 
20:32:20 path and query /static {'file': 'weibo.js'} 
20:32:20 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)

                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:32:20 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



20:32:20 完整请求
20:32:20 请求结束
20:32:20 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:32:20 path and query /api/weibo/all {} 
20:32:20 kwargs,  {'weibo_id': 1} <class 'dict'>
20:32:20 完整请求
20:32:20 请求结束
20:32:20 kwargs,  {'weibo_id': 2} <class 'dict'>
20:32:20 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:32:20 kwargs,  {'weibo_id': 3} <class 'dict'>
20:32:20 path and query /static {'file': 'weibo.js'} 
20:32:20 kwargs,  {'weibo_id': 4} <class 'dict'>
20:32:20 kwargs,  {'weibo_id': 5} <class 'dict'>
20:32:20 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)

                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:32:21 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 18,
        "content": "2321",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": [
      {
        "id": 15,
        "content": "等到",
        "weibo_id": 4
      },
      {
        "id": 16,
        "content": "的",
        "weibo_id": 4
      },
      {
        "id": 17,
        "content": "待得懂",
        "weibo_id": 4
      }
    ]
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      },
      {
        "id": 13,
        "content": "",
        "weibo_id": 5
      },
      {
        "id": 14,
        "content": "速度",
        "weibo_id": 5
      }
    ]
  }
]
20:32:24 完整请求
20:32:24 请求结束
20:32:24 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:32:24 path and query /api/comment/add {} {"content":"123123","weibo_id":"3"}
20:32:24 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 19,
  "content": "123123",
  "weibo_id": 3
}
20:32:31 完整请求
20:32:31 请求结束
20:32:31 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:32:31 path and query /api/comment/add {} {"content":"终于成功了!!!","weibo_id":"2"}
20:32:31 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 20,
  "content": "终于成功了!!!",
  "weibo_id": 2
}
20:34:09 完整请求
20:34:09 请求结束
20:34:09 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:34:09 path and query /weibo/index {} 
20:34:09 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:34:09 完整请求
20:34:09 完整请求
20:34:09 请求结束
20:34:09 请求结束
20:34:09 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:34:09 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:34:09 path and query /static {'file': 'weibo.js'} 
20:34:09 path and query /static {'file': 'gua.js'} 
20:34:09 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



     [weibo]: ${content}
                <button class="comment-delete">删除评论</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)

                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:34:09 完整请求
20:34:09 请求结束
20:34:09 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:34:09 path and query /api/weibo/all {} 
20:34:09 完整请求
20:34:09 请求结束
20:34:09 kwargs,  {'weibo_id': 1} <class 'dict'>
20:34:09 kwargs,  {'weibo_id': 2} <class 'dict'>
20:34:09 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:34:09 path and query /static {'file': 'weibo.js'} 
20:34:09 kwargs,  {'weibo_id': 3} <class 'dict'>
20:34:09 kwargs,  {'weibo_id': 4} <class 'dict'>
20:34:09 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
                <button class="comment-delete">删除评论</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)

                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:34:10 kwargs,  {'weibo_id': 5} <class 'dict'>
20:34:10 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 20,
        "content": "终于成功了!!!",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 18,
        "content": "2321",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "123123",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": [
      {
        "id": 15,
        "content": "等到",
        "weibo_id": 4
      },
      {
        "id": 16,
        "content": "的",
        "weibo_id": 4
      },
      {
        "id": 17,
        "content": "待得懂",
        "weibo_id": 4
      }
    ]
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      },
      {
        "id": 13,
        "content": "",
        "weibo_id": 5
      },
      {
        "id": 14,
        "content": "速度",
        "weibo_id": 5
      }
    ]
  }
]
20:34:55 完整请求
20:34:55 请求结束
20:34:55 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:34:55 path and query /weibo/index {} 
20:34:55 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:34:55 完整请求
20:34:55 完整请求
20:34:55 请求结束
20:34:55 请求结束
20:34:55 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:34:55 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:34:55 path and query /static {'file': 'weibo.js'} 
20:34:55 path and query /static {'file': 'gua.js'} 
20:34:55 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)

                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:34:55 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



20:34:55 完整请求
20:34:55 请求结束
20:34:55 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:34:55 完整请求
20:34:55 请求结束
20:34:55 path and query /api/weibo/all {} 
20:34:55 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:34:55 kwargs,  {'weibo_id': 1} <class 'dict'>
20:34:55 path and query /static {'file': 'weibo.js'} 
20:34:55 kwargs,  {'weibo_id': 2} <class 'dict'>
20:34:55 kwargs,  {'weibo_id': 3} <class 'dict'>
20:34:55 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)

                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:34:55 kwargs,  {'weibo_id': 4} <class 'dict'>
20:34:55 kwargs,  {'weibo_id': 5} <class 'dict'>
20:34:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 20,
        "content": "终于成功了!!!",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 18,
        "content": "2321",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "123123",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": [
      {
        "id": 15,
        "content": "等到",
        "weibo_id": 4
      },
      {
        "id": 16,
        "content": "的",
        "weibo_id": 4
      },
      {
        "id": 17,
        "content": "待得懂",
        "weibo_id": 4
      }
    ]
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      },
      {
        "id": 13,
        "content": "",
        "weibo_id": 5
      },
      {
        "id": 14,
        "content": "速度",
        "weibo_id": 5
      }
    ]
  }
]
20:35:44 完整请求
20:35:45 请求结束
20:35:45 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:35:45 path and query /weibo/index {} 
20:35:45 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:35:45 完整请求
20:35:45 完整请求
20:35:45 请求结束
20:35:45 请求结束
20:35:45 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:35:45 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:35:45 path and query /static {'file': 'weibo.js'} 
20:35:45 path and query /static {'file': 'gua.js'} 
20:35:45 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)

                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:35:45 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



20:35:45 完整请求
20:35:45 请求结束
20:35:45 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:35:45 path and query /api/weibo/all {} 
20:35:45 完整请求
20:35:45 请求结束
20:35:45 kwargs,  {'weibo_id': 1} <class 'dict'>
20:35:45 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:35:45 kwargs,  {'weibo_id': 2} <class 'dict'>
20:35:45 path and query /static {'file': 'weibo.js'} 
20:35:45 kwargs,  {'weibo_id': 3} <class 'dict'>
20:35:45 kwargs,  {'weibo_id': 4} <class 'dict'>
20:35:45 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div>
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)

                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:35:45 kwargs,  {'weibo_id': 5} <class 'dict'>
20:35:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 20,
        "content": "终于成功了!!!",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 18,
        "content": "2321",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "123123",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": [
      {
        "id": 15,
        "content": "等到",
        "weibo_id": 4
      },
      {
        "id": 16,
        "content": "的",
        "weibo_id": 4
      },
      {
        "id": 17,
        "content": "待得懂",
        "weibo_id": 4
      }
    ]
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      },
      {
        "id": 13,
        "content": "",
        "weibo_id": 5
      },
      {
        "id": 14,
        "content": "速度",
        "weibo_id": 5
      }
    ]
  }
]
20:35:54 完整请求
20:35:54 请求结束
20:35:55 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:35:55 path and query /api/comment/add {} {"content":"这样呢","weibo_id":"1"}
20:35:55 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 21,
  "content": "这样呢",
  "weibo_id": 1
}
20:41:13 完整请求
20:41:13 请求结束
20:41:13 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:41:13 path and query /weibo/index {} 
20:41:13 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:41:13 完整请求
20:41:13 完整请求
20:41:13 请求结束
20:41:13 请求结束
20:41:13 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:41:13 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:41:13 path and query /static {'file': 'gua.js'} 
20:41:13 path and query /static {'file': 'weibo.js'} 
20:41:13 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div data-id=${c.id} class='comment-cell' >
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)

                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEventCommentDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:41:13 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



20:41:13 完整请求
20:41:13 请求结束
20:41:13 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:41:13 path and query /api/weibo/all {} 
20:41:13 kwargs,  {'weibo_id': 1} <class 'dict'>
20:41:13 完整请求
20:41:13 请求结束
20:41:13 kwargs,  {'weibo_id': 2} <class 'dict'>
20:41:13 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:41:13 kwargs,  {'weibo_id': 3} <class 'dict'>
20:41:14 kwargs,  {'weibo_id': 4} <class 'dict'>
20:41:14 path and query /static {'file': 'weibo.js'} 
20:41:14 kwargs,  {'weibo_id': 5} <class 'dict'>
20:41:14 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div data-id=${c.id} class='comment-cell' >
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)

                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEventCommentDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:41:14 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 21,
        "content": "这样呢",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 20,
        "content": "终于成功了!!!",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 18,
        "content": "2321",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "123123",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": [
      {
        "id": 15,
        "content": "等到",
        "weibo_id": 4
      },
      {
        "id": 16,
        "content": "的",
        "weibo_id": 4
      },
      {
        "id": 17,
        "content": "待得懂",
        "weibo_id": 4
      }
    ]
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      },
      {
        "id": 13,
        "content": "",
        "weibo_id": 5
      },
      {
        "id": 14,
        "content": "速度",
        "weibo_id": 5
      }
    ]
  }
]
20:41:50 完整请求
20:41:50 请求结束
20:41:50 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:41:50 path and query /api/comment/add {} {"content":"","weibo_id":"3"}
20:41:50 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 22,
  "content": "",
  "weibo_id": 3
}
20:41:53 完整请求
20:41:53 请求结束
20:41:53 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:41:53 path and query /api/comment/add {} {"content":"事儿","weibo_id":"3"}
20:41:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 23,
  "content": "事儿",
  "weibo_id": 3
}
20:42:08 完整请求
20:42:08 请求结束
20:42:33 完整请求
20:42:33 请求结束
20:42:33 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:42:33 path and query /weibo/index {} 
20:42:33 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:42:33 完整请求
20:42:33 完整请求
20:42:33 请求结束
20:42:33 请求结束
20:42:33 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:42:33 path and query /static {'file': 'gua.js'} 
20:42:33 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:42:33 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



20:42:33 path and query /static {'file': 'weibo.js'} 
20:42:34 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div data-id=${c.id} class='comment-cell' >
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)

                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEventCommentDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
   // bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:42:34 完整请求
20:42:34 请求结束
20:42:34 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:42:34 path and query /api/weibo/all {} 
20:42:34 kwargs,  {'weibo_id': 1} <class 'dict'>
20:42:34 完整请求
20:42:34 请求结束
20:42:34 kwargs,  {'weibo_id': 2} <class 'dict'>
20:42:34 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:42:34 kwargs,  {'weibo_id': 3} <class 'dict'>
20:42:34 path and query /static {'file': 'weibo.js'} 
20:42:34 kwargs,  {'weibo_id': 4} <class 'dict'>
20:42:34 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div data-id=${c.id} class='comment-cell' >
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)

                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEventCommentDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
   // bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:42:34 kwargs,  {'weibo_id': 5} <class 'dict'>
20:42:34 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 21,
        "content": "这样呢",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 20,
        "content": "终于成功了!!!",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 18,
        "content": "2321",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "123123",
        "weibo_id": 3
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 3
      },
      {
        "id": 23,
        "content": "事儿",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": [
      {
        "id": 15,
        "content": "等到",
        "weibo_id": 4
      },
      {
        "id": 16,
        "content": "的",
        "weibo_id": 4
      },
      {
        "id": 17,
        "content": "待得懂",
        "weibo_id": 4
      }
    ]
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      },
      {
        "id": 13,
        "content": "",
        "weibo_id": 5
      },
      {
        "id": 14,
        "content": "速度",
        "weibo_id": 5
      }
    ]
  }
]
20:42:47 完整请求
20:42:47 请求结束
20:42:47 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:42:47 path and query /api/comment/add {} {"content":"呃","weibo_id":"3"}
20:42:47 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 24,
  "content": "呃",
  "weibo_id": 3
}
20:44:40 完整请求
20:44:40 请求结束
20:44:40 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:44:40 path and query /weibo/index {} 
20:44:40 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:44:40 完整请求
20:44:40 完整请求
20:44:40 请求结束
20:44:40 请求结束
20:44:40 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:44:40 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:44:40 path and query /static {'file': 'weibo.js'} 
20:44:40 path and query /static {'file': 'gua.js'} 
20:44:40 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div data-id=${c.id} class='comment-cell' >
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)
                log('weiboCell', weiboCell)
                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEventCommentDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
   // bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()
20:44:40 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}




20:44:40 完整请求
20:44:40 请求结束
20:44:40 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:44:40 完整请求
20:44:40 请求结束
 /api/weibo/all {} 
20:44:40 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:44:40 kwargs,  {'weibo_id': 1} <class 'dict'>
20:44:40 path and query /static {'file': 'weibo.js'} 
20:44:40 kwargs,  {'weibo_id': 2} <class 'dict'>
20:44:40 kwargs,  {'weibo_id': 3} <class 'dict'>
20:44:40 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div data-id=${c.id} class='comment-cell' >
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)
                log('weiboCell', weiboCell)
                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEventCommentDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
   // bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:44:40 kwargs,  {'weibo_id': 4} <class 'dict'>
20:44:40 kwargs,  {'weibo_id': 5} <class 'dict'>
20:44:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 21,
        "content": "这样呢",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 20,
        "content": "终于成功了!!!",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 18,
        "content": "2321",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "123123",
        "weibo_id": 3
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 3
      },
      {
        "id": 23,
        "content": "事儿",
        "weibo_id": 3
      },
      {
        "id": 24,
        "content": "呃",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": [
      {
        "id": 15,
        "content": "等到",
        "weibo_id": 4
      },
      {
        "id": 16,
        "content": "的",
        "weibo_id": 4
      },
      {
        "id": 17,
        "content": "待得懂",
        "weibo_id": 4
      }
    ]
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      },
      {
        "id": 13,
        "content": "",
        "weibo_id": 5
      },
      {
        "id": 14,
        "content": "速度",
        "weibo_id": 5
      }
    ]
  }
]
20:44:45 完整请求
20:44:45 请求结束
20:44:45 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:44:45 path and query /api/comment/add {} {"content":"5","weibo_id":"3"}
20:44:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 25,
  "content": "5",
  "weibo_id": 3
}
20:45:59 完整请求
20:45:59 请求结束
20:45:59 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:45:59 path and query /weibo/index {} 
20:45:59 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:46:00 完整请求
20:46:00 完整请求
20:46:00 请求结束
20:46:00 请求结束
20:46:00 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:46:00 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:46:00 path and query /static {'file': 'gua.js'} 

20:46:00 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div data-id=${c.id} class='comment-cell' >
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                og('selector', selector)
                var weiboCell = e(selector)
                log('weiboCell', weiboCell)
                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEventCommentDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
   // bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:46:00 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



20:46:00 完整请求
20:46:00 请求结束
20:46:00 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:46:00 path and query /api/weibo/all {} 
20:46:00 完整请求
20:46:00 请求结束
20:46:00 kwargs,  {'weibo_id': 1} <class 'dict'>
20:46:00 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:46:00 kwargs,  {'weibo_id': 2} <class 'dict'>
20:46:00 path and query /static {'file': 'weibo.js'} 
20:46:00 kwargs,  {'weibo_id': 3} <class 'dict'>
20:46:00 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div data-id=${c.id} class='comment-cell' >
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                og('selector', selector)
                var weiboCell = e(selector)
                log('weiboCell', weiboCell)
                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEventCommentDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
   // bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:46:00 kwargs,  {'weibo_id': 4} <class 'dict'>
20:46:00 kwargs,  {'weibo_id': 5} <class 'dict'>
20:46:00 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 21,
        "content": "这样呢",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 20,
        "content": "终于成功了!!!",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 18,
        "content": "2321",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "123123",
        "weibo_id": 3
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 3
      },
      {
        "id": 23,
        "content": "事儿",
        "weibo_id": 3
      },
      {
        "id": 24,
        "content": "呃",
        "weibo_id": 3
      },
      {
        "id": 25,
        "content": "5",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": [
      {
        "id": 15,
        "content": "等到",
        "weibo_id": 4
      },
      {
        "id": 16,
        "content": "的",
        "weibo_id": 4
      },
      {
        "id": 17,
        "content": "待得懂",
        "weibo_id": 4
      }
    ]
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      },
      {
        "id": 13,
        "content": "",
        "weibo_id": 5
      },
      {
        "id": 14,
        "content": "速度",
        "weibo_id": 5
      }
    ]
  }
]
20:46:05 完整请求
20:46:05 请求结束
20:46:05 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:46:05 path and query /api/comment/add {} {"content":"的","weibo_id":"5"}
20:46:05 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 26,
  "content": "的",
  "weibo_id": 5
}
20:46:24 完整请求
20:46:24 请求结束
20:46:24 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:46:24 path and query /weibo/index {} 
20:46:24 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:46:24 完整请求
20:46:24 完整请求
20:46:25 请求结束
20:46:25 请求结束
20:46:25 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:46:25 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:46:25 path and query /static {'file': 'weibo.js'} 
20:46:25 path and query /static {'file': 'gua.js'} 
20:46:25 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



iv class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                log('selector', selector)
                var weiboCell = e(selector)
                log('weiboCell', weiboCell)
                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEventCommentDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
   // bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:46:25 完整请求
20:46:25 请求结束
20:46:25 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:46:25 完整请求
20:46:25 path and query /api/weibo/all {} 
20:46:25 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:46:25 kwargs,  {'weibo_id': 1} <class 'dict'>
20:46:25 kwargs,  {'weibo_id': 2} <class 'dict'>
20:46:25 path and query /static {'file': 'weibo.js'} 
20:46:25 kwargs,  {'weibo_id': 3} <class 'dict'>
20:46:25 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div data-id=${c.id} class='comment-cell' >
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                log('selector', selector)
                var weiboCell = e(selector)
                log('weiboCell', weiboCell)
                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEventCommentDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
   // bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:46:25 kwargs,  {'weibo_id': 4} <class 'dict'>
20:46:25 kwargs,  {'weibo_id': 5} <class 'dict'>
20:46:25 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 21,
        "content": "这样呢",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 20,
        "content": "终于成功了!!!",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 18,
        "content": "2321",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "123123",
        "weibo_id": 3
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 3
      },
      {
        "id": 23,
        "content": "事儿",
        "weibo_id": 3
      },
      {
        "id": 24,
        "content": "呃",
        "weibo_id": 3
      },
      {
        "id": 25,
        "content": "5",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": [
      {
        "id": 15,
        "content": "等到",
        "weibo_id": 4
      },
      {
        "id": 16,
        "content": "的",
        "weibo_id": 4
      },
      {
        "id": 17,
        "content": "待得懂",
        "weibo_id": 4
      }
    ]
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      },
      {
        "id": 13,
        "content": "",
        "weibo_id": 5
      },
      {
        "id": 14,
        "content": "速度",
        "weibo_id": 5
      },
      {
        "id": 26,
        "content": "的",
        "weibo_id": 5
      }
    ]
  }
]
20:46:29 完整请求
20:46:29 请求结束
20:46:29 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:46:29 path and query /api/comment/add {} {"content":"22","weibo_id":"5"}
20:46:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 27,
  "content": "22",
  "weibo_id": 5
}
20:48:39 完整请求
20:48:39 请求结束
20:48:39 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:48:39 path and query /weibo/index {} 
20:48:39 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:48:39 完整请求
20:48:39 完整请求
20:48:39 请求结束
20:48:39 请求结束
20:48:39 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:48:39 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:48:39 path and query /static {'file': 'gua.js'} 
20:48:39 path and query /static {'file': 'weibo.js'} 
20:48:39 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



     <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                log('selector', selector)
                var weiboCell = e(selector)
                log('weiboCell', weiboCell)
                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEventCommentDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
   // bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:48:39 完整请求
20:48:39 请求结束
20:48:39 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:48:39 完整请求
20:48:39 path and query /api/weibo/all {} 
20:48:39 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:48:39 kwargs,  {'weibo_id': 1} <class 'dict'>
20:48:39 kwargs,  {'weibo_id': 2} <class 'dict'>
20:48:39 path and query /static {'file': 'weibo.js'} 
20:48:40 kwargs,  {'weibo_id': 3} <class 'dict'>
20:48:40 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div data-commentid=${c.id} class='comment-cell' >
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                log('selector', selector)
                var weiboCell = e(selector)
                log('weiboCell', weiboCell)
                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEventCommentDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
   // bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:48:40 kwargs,  {'weibo_id': 4} <class 'dict'>
20:48:40 kwargs,  {'weibo_id': 5} <class 'dict'>
20:48:40 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 21,
        "content": "这样呢",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 20,
        "content": "终于成功了!!!",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 18,
        "content": "2321",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "123123",
        "weibo_id": 3
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 3
      },
      {
        "id": 23,
        "content": "事儿",
        "weibo_id": 3
      },
      {
        "id": 24,
        "content": "呃",
        "weibo_id": 3
      },
      {
        "id": 25,
        "content": "5",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": [
      {
        "id": 15,
        "content": "等到",
        "weibo_id": 4
      },
      {
        "id": 16,
        "content": "的",
        "weibo_id": 4
      },
      {
        "id": 17,
        "content": "待得懂",
        "weibo_id": 4
      }
    ]
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      },
      {
        "id": 13,
        "content": "",
        "weibo_id": 5
      },
      {
        "id": 14,
        "content": "速度",
        "weibo_id": 5
      },
      {
        "id": 26,
        "content": "的",
        "weibo_id": 5
      },
      {
        "id": 27,
        "content": "22",
        "weibo_id": 5
      }
    ]
  }
]
20:48:52 完整请求
20:48:52 请求结束
20:48:52 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:48:52 path and query /api/comment/add {} {"content":"待得懂","weibo_id":"5"}
20:48:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 28,
  "content": "待得懂",
  "weibo_id": 5
}
20:49:51 完整请求
20:49:52 请求结束
20:49:52 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:49:52 path and query /weibo/index {} 
20:49:52 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:49:52 完整请求
20:49:52 完整请求
20:49:52 请求结束
20:49:52 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:49:52 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:49:52 path and query /static {'file': 'gua.js'} 
20:49:52 path and query /static {'file': 'weibo.js'} 
20:49:52 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div data-commentid=${c.id} class='comment-cell' >
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)
                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEventCommentDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
   // bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:49:52 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



20:49:52 完整请求
20:49:52 请求结束
20:49:52 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:49:52 path and query /api/weibo/all {} 
20:49:52 完整请求
20:49:52 请求结束
20:49:52 kwargs,  {'weibo_id': 1} <class 'dict'>
20:49:52 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:49:52 kwargs,  {'weibo_id': 2} <class 'dict'>
20:49:52 path and query /static {'file': 'weibo.js'} 
20:49:52 kwargs,  {'weibo_id': 3} <class 'dict'>
20:49:52 kwargs,  {'weibo_id': 4} <class 'dict'>
20:49:52 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div data-commentid=${c.id} class='comment-cell' >
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)
                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEventCommentDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
   // bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:49:52 kwargs,  {'weibo_id': 5} <class 'dict'>
20:49:52 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 21,
        "content": "这样呢",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 20,
        "content": "终于成功了!!!",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 18,
        "content": "2321",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "123123",
        "weibo_id": 3
      },
      {
        "id": 22,
        "content": "",
        "weibo_id": 3
      },
      {
        "id": 23,
        "content": "事儿",
        "weibo_id": 3
      },
      {
        "id": 24,
        "content": "呃",
        "weibo_id": 3
      },
      {
        "id": 25,
        "content": "5",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": [
      {
        "id": 15,
        "content": "等到",
        "weibo_id": 4
      },
      {
        "id": 16,
        "content": "的",
        "weibo_id": 4
      },
      {
        "id": 17,
        "content": "待得懂",
        "weibo_id": 4
      }
    ]
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      },
      {
        "id": 13,
        "content": "",
        "weibo_id": 5
      },
      {
        "id": 14,
        "content": "速度",
        "weibo_id": 5
      },
      {
        "id": 26,
        "content": "的",
        "weibo_id": 5
      },
      {
        "id": 27,
        "content": "22",
        "weibo_id": 5
      },
      {
        "id": 28,
        "content": "待得懂",
        "weibo_id": 5
      }
    ]
  }
]
20:50:19 完整请求
20:50:19 请求结束
20:50:19 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:50:19 path and query /weibo/index {} 
20:50:19 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:50:19 完整请求
20:50:19 完整请求
20:50:19 请求结束
20:50:19 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:50:19 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:50:19 path and query /static {'file': 'gua.js'} 
20:50:19 path and query /static {'file': 'weibo.js'} 
20:50:19 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div data-commentid=${c.id} class='comment-cell' >
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)
                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEventCommentDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
   // bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:50:19 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}


var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}



20:50:19 完整请求
20:50:19 请求结束
20:50:19 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:50:19 完整请求
20:50:19 请求结束
20:50:19 path and query /api/weibo/all {} 
20:50:19 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:50:19 kwargs,  {'weibo_id': 1} <class 'dict'>
20:50:19 path and query /static {'file': 'weibo.js'} 
20:50:19 kwargs,  {'weibo_id': 2} <class 'dict'>
20:50:19 kwargs,  {'weibo_id': 3} <class 'dict'>
20:50:19 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div data-commentid=${c.id} class='comment-cell' >
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)
                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEventCommentDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
   // bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:50:19 kwargs,  {'weibo_id': 4} <class 'dict'>
20:50:19 kwargs,  {'weibo_id': 5} <class 'dict'>
20:50:19 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 21,
        "content": "这样呢",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 20,
        "content": "终于成功了!!!",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 18,
        "content": "2321",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "123123",
        "weibo_id": 3
      },
      {
        "id": 23,
        "content": "事儿",
        "weibo_id": 3
      },
      {
        "id": 24,
        "content": "呃",
        "weibo_id": 3
      },
      {
        "id": 25,
        "content": "5",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": [
      {
        "id": 15,
        "content": "等到",
        "weibo_id": 4
      },
      {
        "id": 16,
        "content": "的",
        "weibo_id": 4
      },
      {
        "id": 17,
        "content": "待得懂",
        "weibo_id": 4
      }
    ]
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      },
      {
        "id": 14,
        "content": "速度",
        "weibo_id": 5
      },
      {
        "id": 26,
        "content": "的",
        "weibo_id": 5
      },
      {
        "id": 27,
        "content": "22",
        "weibo_id": 5
      },
      {
        "id": 28,
        "content": "待得懂",
        "weibo_id": 5
      }
    ]
  }
]
20:55:28 完整请求
20:55:28 请求结束
20:55:28 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:28 path and query /weibo/index {} 
20:55:28 响应
 HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>weibo</title>
    <style>
        .comment {
            border: 1px red solid;
        }
        .comment-list {
            background: #4284D3;
        }
    </style>
</head>
<body>
    <div>
        <input id="id-input-weibo">
        <button id="id-button-add-weibo">发表微博</button>
    </div>
    <div class="weibo-list gua-auto-list"
         data-method="get"
         data-path="/api/weibo/all"
         data-template="xxtemplate"
    >
        <div class="comment">

        </div>
        <div class="comment-form">
            <input type="hidden" name="weibo_id" value="">
            <input name="content">
            <br>
            <button class="comment-add">添加评论</button>
        </div>
    </div>
    <script src='/static?file=gua.js'></script>
    <script src='/static?file=weibo.js'></script>


</body>
</html>
20:55:28 完整请求
20:55:28 完整请求
20:55:28 请求结束
20:55:28 请求结束
20:55:28 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:28 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:28 path and query /static {'file': 'weibo.js'} 
20:55:28 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div data-commentid=${c.id} class='comment-cell' >
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)
                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEventCommentDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            var commentcell = self.parentElement
            var comment_id = commentcell.dataset.commentid
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                commentcell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:55:28 响应
 HTTP/1.1 200 OK

var log = function() {
    console.log.apply(console, arguments)
}

var e = function(sel) {
    return document.querySelector(sel)
}

/*
 ajax 函数
*/
var ajax = function(method, path, data, responseCallback) {
    var r = new XMLHttpRequest()
    // 设置请求方法和请求地址
    r.open(method, path, true)
    // 设置发送的数据的格式为 application/json
    // 这个不是必须的
    r.setRequestHeader('Content-Type', 'application/json')
    // 注册响应函数
    r.onreadystatechange = function() {
        if(r.readyState === 4) {
            // r.response 存的就是服务器发过来的放在 HTTP BODY 中的数据
            responseCallback(r.response)
        }
    }
    // 把数据转换为 json 格式字符串
    data = JSON.stringify(data)
    // 发送请求
    r.send(data)
}

// TODO API
// 获取所有 todo
var apiTodoAll = function(callback) {
    var path = '/api/todo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 todo
var apiTodoAdd = function(form, callback) {
    var path = '/api/todo/add'
    ajax('POST', path, form, callback)
}

// 删除一个 todo
var apiTodoDelete = function(id, callback) {
    var path = '/api/todo/delete?id=' + id
    ajax('GET', path, '', callback)
    //    get(path, callback)
}

// 更新一个 todo
var apiTodoUpdate = function(form, callback) {
    var path = '/api/todo/update'
    ajax('POST', path, form, callback)
    //    post(path, form, callback)
}

// load weibo all
var apiWeiboAll = function(callback) {
    var path = '/api/weibo/all'
    ajax('GET', path, '', callback)
}

// 增加一个 weibo
var apiWeiboAdd = function(form, callback) {
    var path = '/api/weibo/add'
    ajax('POST', path, form, callback)
}

//删除一个微博
var apiWeiboDelete = function(id, callback) {
    var path = '/api/weibo/delete?id=' + id
    ajax('GET', path, '', callback)
}

//更新一个微博
var apiWeiboUpdate = function(form, callback) {
    var path = '/api/weibo/update'
    ajax('POST', path, form, callback)
}

//新增一个评论
var apiCommentAdd = function(form, callback) {
    var path = '/api/comment/add'
    ajax('POST', path, form, callback)
}

//删除一个评论
var apiCommentDelete = function(id, callback) {
    var path = '/api/comment/delete?id=' + id
    ajax('GET', path, '', callback)
}





20:55:28 完整请求
20:55:28 请求结束
20:55:28 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:28 完整请求
20:55:28 请求结束
20:55:28 path and query /api/weibo/all {} 
20:55:29 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:29 kwargs,  {'weibo_id': 1} <class 'dict'>
20:55:29 path and query /static {'file': 'weibo.js'} 
20:55:29 kwargs,  {'weibo_id': 2} <class 'dict'>
20:55:29 kwargs,  {'weibo_id': 3} <class 'dict'>
20:55:29 响应
 HTTP/1.1 200 OK

﻿var timeString = function(timestamp) {
    t = new Date(timestamp * 1000)
    t = t.toLocaleTimeString()
    return t
}

var commentsTemplate = function(comments) {
    var html = ''
    for(var i = 0; i < comments.length; i++) {
        var c = comments[i]
        var t = `
            <div data-commentid=${c.id} class='comment-cell' >
                ${c.content}
                <button class="comment-delete">删除评论</button>
            </div>
        `
        html += t
    }
    return html
}

var weiboTemplate = function(weibo) {
    var content = weibo.content
    var id = weibo.id
    var comments = commentsTemplate(weibo.comments)
    var t = `
        <div class='weibo-cell' data-id=${id} data-name="test">
            <div class="weibo-content">
                [weibo]: ${content}
            </div>
            <button class="weibo-delete">删除微博</button>
            <button class="weibo-edit">更新微博</button>
            <div class="comment-list">
                ${comments}
            </div>
            <div class="comment-form">
                <input type="hidden" name="weibo_id" value="">
                <input name="content" class="comment-content">
                <br>
                <button class="comment-add">添加评论</button>
            </div>
        </div>
    `
    return t
    /*
    上面的写法在 python 中是这样的
    t = """
    <div class="weibo-cell">
        <button class="weibo-delete">删除</button>
        <span>{}</span>
    </div>
    """.format(weibo)
    */
}

var insertweibo = function(weibo) {
    var weiboCell = weiboTemplate(weibo)
    // 插入 weibo-list
    var weiboList = e('.weibo-list')
    weiboList.insertAdjacentHTML('beforeend', weiboCell)
}

var insertEditForm = function(cell, weibo) {
    var content = weibo.content
    var form = `
        <div class='weibo-edit-form'>
            <input class="weibo-edit-input" value=${content}>
            <button class='weibo-update'>更新</button>
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', form)
}

var insertUpdate = function(cell, weibo){
    var content = weibo.content
    var t = `
        <div class="weibo-content">
                [weibo]: ${content}
        </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}

var insertCommentAdd = function(cell, weibo){
    var comments = weibo.content
    var t = `
        <div class="comment-list">
                ${comments}
                <button class="comment-delete">删除评论</button>
            </div>
    `
    cell.insertAdjacentHTML('afterbegin', t)
}


var loadweibos = function() {
    // 调用 ajax api 来载入数据
    apiWeiboAll(function(r) {
        // console.log('load all', r)
        // 解析为 数组
        var weibos = JSON.parse(r)
        // 循环添加到页面中
        for(var i = 0; i < weibos.length; i++) {
            var weibo = weibos[i]
            insertweibo(weibo)
        }
    })
}

var bindEventweiboAdd = function() {
    var b = e('#id-button-add-weibo')
    // 注意, 第二个参数可以直接给出定义函数
    b.addEventListener('click', function(){
        var input = e('#id-input-weibo')
        var content = input.value
        log('click add', content)
        var form = {
            'content': content,
        }
        apiWeiboAdd(form, function(r) {
            // 收到返回的数据, 插入到页面中
            var weibo = JSON.parse(r)
            insertweibo(weibo)
        })
    })
}

var bindEventweiboDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-delete')){
            // 删除这个 weibo
            var weiboCell = self.parentElement
            var weibo_id = weiboCell.dataset.id
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiWeiboDelete(weibo_id, function(r){
                log('删除成功', weibo_id)
                weiboCell.remove()
            })
        }
    })
}

var bindEventweiboEdit = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('weibo-edit')){
            var weiboCell = self.parentElement
            var content = weiboCell.children[0]
            var weibo_id = weiboCell.dataset.id

            apiWeiboAll(function(r) {
            var weibos = JSON.parse(r)
            // 循环添加到页面中
            for(var i = 0; i < weibos.length; i++) {
                var weibo = weibos[i]
                log('weibo', weibo)
                if (weibo.id == weibo_id){
                    insertEditForm(weiboCell, weibo)
                    content.remove()
                }
        }
    })
        }
    })
}


var bindEventweiboUpdate = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        log('self',self)
        if(self.classList.contains('weibo-update')){
            log('点击了 update ')
            //
            var editForm = self.parentElement
            // querySelector 是 DOM 元素的方法
            // document.querySelector 中的 document 是所有元素的祖先元素
            var input = editForm.querySelector('.weibo-edit-input')
            var content = input.value
            // 用 closest 方法可以找到最近的直系父节点
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var form = {
                'id': weibo_id,
                'content': content,
            }
            apiWeiboUpdate(form, function(r){
                log('更新成功', weibo_id)
                var weibo = JSON.parse(r)
                var selector = '[data-id="' + weibo.id + '"]'
                var weiboCell = e(selector)

                var edit = weiboCell.children[0]
                edit.remove()

                insertUpdate(weiboCell, weibo)

            })
        }
    })
}


var bindEventCommentAdd = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-add')){
            log('点击了添加评论')
            var commentform = self.parentElement
            var weiboCell = self.closest('.weibo-cell')
            var weibo_id = weiboCell.dataset.id
            var input = commentform.querySelector('.comment-content')
            var content = input.value
            log('click add', content)
            var form = {
                'content': content,
                'weibo_id': weibo_id,
            }
            apiCommentAdd(form, function(r) {
                // 收到返回的数据, 插入到页面中
                var comment = JSON.parse(r)
                var selector = '[data-id="' + comment.weibo_id + '"]'
                var weiboCell = e(selector)
                var commentlist = weiboCell.children[3]

                insertCommentAdd(commentlist, comment)

            })
        }
    })
}


var bindEventCommentDelete = function() {
    var weiboList = e('.weibo-list')
    // 注意, 第二个参数可以直接给出定义函数
    weiboList.addEventListener('click', function(event){
        var self = event.target
        if(self.classList.contains('comment-delete')){
            var commentcell = self.parentElement
            var comment_id = commentcell.dataset.commentid
            // log('weibo_id----', weibo_id)
            // log('dataset---', weiboCell.dataset)
            apiCommentDelete(comment_id, function(r){
                log('删除成功', comment_id)
                commentcell.remove()
            })
        }
    })
}


var bindEvents = function() {
    bindEventweiboAdd()
    bindEventweiboDelete()
    bindEventweiboEdit()
    bindEventweiboUpdate()
    bindEventCommentAdd()
    bindEventCommentDelete()
}

var __main = function() {
    bindEvents()
    loadweibos()
}

__main()

20:55:29 kwargs,  {'weibo_id': 4} <class 'dict'>
20:55:29 kwargs,  {'weibo_id': 5} <class 'dict'>
20:55:29 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 1,
    "content": "测试1",
    "comments": [
      {
        "id": 1,
        "content": "楼主说得对",
        "weibo_id": 1,
        "user_id": 2
      },
      {
        "id": 2,
        "content": "lbvu is right",
        "weibo_id": 1,
        "user_id": 1
      },
      {
        "id": 21,
        "content": "这样呢",
        "weibo_id": 1
      }
    ]
  },
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 20,
        "content": "终于成功了!!!",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 18,
        "content": "2321",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "123123",
        "weibo_id": 3
      },
      {
        "id": 23,
        "content": "事儿",
        "weibo_id": 3
      },
      {
        "id": 24,
        "content": "呃",
        "weibo_id": 3
      },
      {
        "id": 25,
        "content": "5",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": [
      {
        "id": 15,
        "content": "等到",
        "weibo_id": 4
      },
      {
        "id": 16,
        "content": "的",
        "weibo_id": 4
      },
      {
        "id": 17,
        "content": "待得懂",
        "weibo_id": 4
      }
    ]
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      },
      {
        "id": 14,
        "content": "速度",
        "weibo_id": 5
      },
      {
        "id": 26,
        "content": "的",
        "weibo_id": 5
      },
      {
        "id": 27,
        "content": "22",
        "weibo_id": 5
      },
      {
        "id": 28,
        "content": "待得懂",
        "weibo_id": 5
      }
    ]
  }
]
20:55:30 完整请求
20:55:30 请求结束
20:55:30 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:30 path and query /api/comment/delete {'id': '28'} 
20:55:31 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
20:55:32 完整请求
20:55:32 请求结束
20:55:32 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:32 path and query /api/comment/delete {'id': '8'} 
20:55:32 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
20:55:34 完整请求
20:55:34 请求结束
20:55:34 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:34 path and query /api/comment/delete {'id': '21'} 
20:55:34 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
20:55:35 完整请求
20:55:35 请求结束
20:55:35 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:35 path and query /api/comment/delete {'id': '20'} 
20:55:35 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
20:55:36 完整请求
20:55:36 请求结束
20:55:36 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:36 path and query /api/comment/delete {'id': '7'} 
20:55:36 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
20:55:36 完整请求
20:55:36 请求结束
20:55:36 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:36 path and query /api/comment/delete {'id': '3'} 
20:55:36 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
20:55:37 完整请求
20:55:37 请求结束
20:55:37 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:37 path and query /api/comment/delete {'id': '4'} 
20:55:37 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
20:55:39 完整请求
20:55:39 请求结束
20:55:39 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:39 path and query /api/comment/delete {'id': '25'} 
20:55:39 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
20:55:39 完整请求
20:55:39 请求结束
20:55:39 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:39 path and query /api/comment/delete {'id': '24'} 
20:55:39 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
20:55:40 完整请求
20:55:40 请求结束
20:55:40 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:40 path and query /api/comment/delete {'id': '23'} 
20:55:40 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
20:55:40 完整请求
20:55:40 请求结束
20:55:40 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:40 path and query /api/comment/delete {'id': '19'} 
20:55:40 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
20:55:40 完整请求
20:55:40 请求结束
20:55:41 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:41 path and query /api/comment/delete {'id': '18'} 
20:55:41 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
20:55:41 完整请求
20:55:41 请求结束
20:55:41 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:41 path and query /api/comment/delete {'id': '17'} 
20:55:41 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
20:55:42 完整请求
20:55:42 请求结束
20:55:42 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:42 path and query /api/comment/delete {'id': '16'} 
20:55:42 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
20:55:43 完整请求
20:55:43 请求结束
20:55:43 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:43 path and query /api/comment/delete {'id': '26'} 
20:55:43 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
20:55:43 完整请求
20:55:43 请求结束
20:55:43 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:43 path and query /api/comment/delete {'id': '12'} 
20:55:43 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
20:55:44 完整请求
20:55:44 请求结束
20:55:44 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:44 path and query /api/comment/delete {'id': '27'} 
20:55:44 响应
 HTTP/1.1 404 NOT FOUND

<h1>NOT FOUND</h1>
20:55:53 完整请求
20:55:53 请求结束
20:55:53 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:55:53 path and query /api/comment/add {} {"content":"成功!!","weibo_id":"4"}
20:55:53 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 29,
  "content": "成功!!",
  "weibo_id": 4
}
20:56:06 完整请求
20:56:06 请求结束
20:56:06 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:56:06 path and query /api/comment/add {} {"content":"作业完成","weibo_id":"5"}
20:56:06 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 30,
  "content": "作业完成",
  "weibo_id": 5
}
20:56:12 完整请求
20:56:12 请求结束
20:56:12 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:56:12 path and query /api/weibo/delete {'id': '1'} 
20:56:12 kwargs,  {'weibo_id': 1} <class 'dict'>
20:56:13 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "content": "测试1",
  "comments": [
    {
      "id": 1,
      "content": "楼主说得对",
      "weibo_id": 1,
      "user_id": 2
    },
    {
      "id": 2,
      "content": "lbvu is right",
      "weibo_id": 1,
      "user_id": 1
    },
    {
      "id": 21,
      "content": "这样呢",
      "weibo_id": 1
    }
  ]
}
20:56:22 完整请求
20:56:22 请求结束
20:56:22 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:56:22 path and query /api/weibo/all {} 
20:56:22 kwargs,  {'weibo_id': 2} <class 'dict'>
20:56:22 kwargs,  {'weibo_id': 3} <class 'dict'>
20:56:22 kwargs,  {'weibo_id': 4} <class 'dict'>
20:56:22 kwargs,  {'weibo_id': 5} <class 'dict'>
20:56:22 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "测试2",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 20,
        "content": "终于成功了!!!",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 18,
        "content": "2321",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "123123",
        "weibo_id": 3
      },
      {
        "id": 23,
        "content": "事儿",
        "weibo_id": 3
      },
      {
        "id": 24,
        "content": "呃",
        "weibo_id": 3
      },
      {
        "id": 25,
        "content": "5",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": [
      {
        "id": 15,
        "content": "等到",
        "weibo_id": 4
      },
      {
        "id": 16,
        "content": "的",
        "weibo_id": 4
      },
      {
        "id": 17,
        "content": "待得懂",
        "weibo_id": 4
      },
      {
        "id": 29,
        "content": "成功!!",
        "weibo_id": 4
      }
    ]
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      },
      {
        "id": 14,
        "content": "速度",
        "weibo_id": 5
      },
      {
        "id": 26,
        "content": "的",
        "weibo_id": 5
      },
      {
        "id": 27,
        "content": "22",
        "weibo_id": 5
      },
      {
        "id": 28,
        "content": "待得懂",
        "weibo_id": 5
      },
      {
        "id": 30,
        "content": "作业完成",
        "weibo_id": 5
      }
    ]
  }
]
20:56:28 完整请求
20:56:28 请求结束
20:56:28 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:56:28 path and query /api/weibo/update {} {"id":"2","content":"就是有点难看,."}
20:56:28 kwargs,  {'id': 2} <class 'dict'>
20:56:28 debug 0
20:56:28 kwargs,  {'weibo_id': 2} <class 'dict'>
20:56:28 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 2,
  "content": "就是有点难看,.",
  "comments": [
    {
      "id": 3,
      "content": "hello",
      "weibo_id": 2,
      "user_id": 1
    },
    {
      "id": 4,
      "content": "123",
      "weibo_id": 2,
      "user_id": 1
    },
    {
      "id": 5,
      "content": "asdf",
      "weibo_id": 2,
      "user_id": 1
    },
    {
      "id": 7,
      "content": "说得好",
      "weibo_id": 2,
      "user_id": 2
    },
    {
      "id": 8,
      "content": "说得好",
      "weibo_id": 2,
      "user_id": 2
    },
    {
      "id": 20,
      "content": "终于成功了!!!",
      "weibo_id": 2
    }
  ]
}
20:56:35 完整请求
20:56:35 请求结束
20:56:35 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:56:35 path and query /api/weibo/add {} {"content":"很好"}
20:56:35 kwargs,  {'weibo_id': 6} <class 'dict'>
20:56:35 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "content": "很好",
  "comments": []
}
20:56:36 完整请求
20:56:36 请求结束
20:56:36 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:56:36 path and query /api/weibo/all {} 
20:56:36 kwargs,  {'weibo_id': 2} <class 'dict'>
20:56:36 kwargs,  {'weibo_id': 3} <class 'dict'>
20:56:36 kwargs,  {'weibo_id': 4} <class 'dict'>
20:56:36 kwargs,  {'weibo_id': 5} <class 'dict'>
20:56:36 kwargs,  {'weibo_id': 6} <class 'dict'>
20:56:36 响应
 HTTP/1.1 200 OK
Content-Type: application/json

[
  {
    "id": 2,
    "content": "就是有点难看,.",
    "comments": [
      {
        "id": 3,
        "content": "hello",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 4,
        "content": "123",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 5,
        "content": "asdf",
        "weibo_id": 2,
        "user_id": 1
      },
      {
        "id": 7,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 8,
        "content": "说得好",
        "weibo_id": 2,
        "user_id": 2
      },
      {
        "id": 20,
        "content": "终于成功了!!!",
        "weibo_id": 2
      }
    ]
  },
  {
    "id": 3,
    "content": "测试3",
    "comments": [
      {
        "id": 6,
        "content": "123",
        "weibo_id": 3,
        "user_id": 1
      },
      {
        "id": 18,
        "content": "2321",
        "weibo_id": 3
      },
      {
        "id": 19,
        "content": "123123",
        "weibo_id": 3
      },
      {
        "id": 23,
        "content": "事儿",
        "weibo_id": 3
      },
      {
        "id": 24,
        "content": "呃",
        "weibo_id": 3
      },
      {
        "id": 25,
        "content": "5",
        "weibo_id": 3
      }
    ]
  },
  {
    "id": 4,
    "content": "测试4",
    "comments": [
      {
        "id": 15,
        "content": "等到",
        "weibo_id": 4
      },
      {
        "id": 16,
        "content": "的",
        "weibo_id": 4
      },
      {
        "id": 17,
        "content": "待得懂",
        "weibo_id": 4
      },
      {
        "id": 29,
        "content": "成功!!",
        "weibo_id": 4
      }
    ]
  },
  {
    "id": 5,
    "content": "测试5",
    "comments": [
      {
        "id": 12,
        "content": "频率滚",
        "weibo_id": 5
      },
      {
        "id": 14,
        "content": "速度",
        "weibo_id": 5
      },
      {
        "id": 26,
        "content": "的",
        "weibo_id": 5
      },
      {
        "id": 27,
        "content": "22",
        "weibo_id": 5
      },
      {
        "id": 28,
        "content": "待得懂",
        "weibo_id": 5
      },
      {
        "id": 30,
        "content": "作业完成",
        "weibo_id": 5
      }
    ]
  },
  {
    "id": 6,
    "content": "很好",
    "comments": []
  }
]
20:56:42 完整请求
20:56:42 请求结束
20:56:42 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:56:42 path and query /api/weibo/update {} {"id":"6","content":"很好+1"}
20:56:42 kwargs,  {'id': 6} <class 'dict'>
20:56:42 debug 4
20:56:42 kwargs,  {'weibo_id': 6} <class 'dict'>
20:56:42 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 6,
  "content": "很好+1",
  "comments": []
}
20:56:45 完整请求
20:56:45 请求结束
20:56:45 cookie ['Pycharm-e50ba05d=94e49041-fb70-4426-980a-ab19cafcd65d']
20:56:45 path and query /api/comment/add {} {"content":"威武","weibo_id":"6"}
20:56:45 响应
 HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 31,
  "content": "威武",
  "weibo_id": 6
}
